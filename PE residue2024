library(ggplot2)
library(vegan)
library(reshape2)
library(Hmisc)
library(plotrix)
library(phyloseq)
library(MASS)
library(bioDist)
library(igraph)
library(car)
library(coin)
library(edgeR)
library(formatR)
library(gridExtra)
library(gplots)
library(indicspecies)
library(sciplot)
library(ape)
library(grid)
library(RVAideMemoire)
library(gridBase)
library(TukeyC)
library(corrplot)
library(userfriendlyscience)
library(caret)
library(multcompView)
library(ggpmisc)
library(agricolae)
library(ggrepel)
library(ggcor)
library(dplyr)
library(plyr)
library(stringr)
library(nlme)
library(lmerTest)
library(lme4)
library(Hmisc)
library(minpack.lm)
library(stats4)
library(spaa)
library(ggsignif)
library(ggpubr)
source("vennDia.R")
source("CorrDF.R")
source("plotOTU.R")
source("cor.mtest.R")
source("variance_functions.R")
source("maPalette.R")
source("triangle_shape.R")
source("star_shape.R")
source('SourceTracker.r')
debuggingState(on=FALSE)
options(scipen=10)





#######################
##### Bacteria #####
#######################
##### Import Data #####
otu_B <- read.table("B_otutab.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
otu_B <- as.matrix(otu_B)
rownames(otu_B) <- paste("b", rownames(otu_B), sep="")

##### Import design file #####
design_B <- read.table("metadata.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
design_B$Site <-factor(design_B$Site,c("root","soil","film"))
design_B$Treatment1 <- factor(design_B$Treatment1,c("root_CK","root_0","root_150","root_600","soil_CK","soil_0",   "soil_150","soil_600","film_150","film_600"))
design_B$con <- factor(design_B$con,c("0","150","600","CK"))
design_B$film <- factor(design_B$film,c("NO","ADD"))
design_B$Treatment2 <- factor(design_B$Treatment2,c("root_NO","root_ADD","soil_NO","soil_ADD","film_ADD"))
str(design_B)

##### Import Taxonomy #####
tax_B <- read.table("B_tax.txt", row.names=1, sep="\t", header=T ,stringsAsFactors=F,quote="")
rownames(tax_B) <- paste("b",rownames(tax_B),sep="")

# create separate taxonomy label specifying classes of Proteobacteria
tax_B$labels <- tax_B$Phylum
tax_B[ rownames(tax_B)[tax_B$Class=="Alphaproteobacteria" ], ]$labels <- "Alphaproteobacteria"
tax_B[ rownames(tax_B)[tax_B$Class=="Betaproteobacteria" ], ]$labels <- "Betaproteobacteria"
tax_B[ rownames(tax_B)[tax_B$Class=="Gammaproteobacteria" ], ]$labels <- "Gammaproteobacteria"
tax_B[ rownames(tax_B)[tax_B$Class=="Deltaproteobacteria" ], ]$labels <- "Deltaproteobacteria"
table(tax_B$labels)

### Defining bOTU colors by phylum (using the taxonomy file)
tax_B$cols <- tax_B$labels
table(tax_B$cols)

##### Store Cyanobacteria and mitrochrondia sequeces #####
unique(tax_B$Kingdom)
table(tax_B$Kingdom)
r1 <- rownames(tax_B[tax_B$Kingdom=="Archaea",])
table(tax_B$Phylum)
r2 <- rownames(tax_B[tax_B$Phylum=="Cyanobacteria",])
otus_remove_B <- c(r1,r2)

## Remove these from otu table, tax table
otu_B <- otu_B[-which(rownames(otu_B) %in% otus_remove_B),]
tax_B <- tax_B[rownames(otu_B),]
design_B <- droplevels(design_B[rownames(design_B) %in% colnames(otu_B),])
design_B <- design_B[colnames(otu_B),]
dim(otu_B)
dim(tax_B)
dim(design_B)


###### B sequence and OTU counts ######
sum(colSums(otu_B))
sort(colSums(otu_B))
median(colSums(otu_B))
nrow(tax_B)
table(tax_B$Kingdom)

## Order taxonmy file by OTU
otu_order_B <- match(rownames(otu_B), rownames(tax_B))
tax_B <- tax_B[otu_order_B,]

##### Define sample types #####
soilsamples <- rownames(design_B)[which(design_B$Site == "soil")]
rootsamples <- rownames(design_B)[which(design_B$Site == "root")]
filmsamples <- rownames(design_B)[which(design_B$Site == "film")]

##### Total number of soil / root OTUs #####
soil_B_otu <- otu_B[,soilsamples]
soil_B_otu <- soil_B_otu[rowSums(soil_B_otu) > 0,]
nrow(soil_B_otu)

root_B_otu <- otu_B[,rootsamples]
root_B_otu <- root_B_otu[rowSums(root_B_otu) > 0,]
nrow(root_B_otu)

film_B_otu <- otu_B[,filmsamples]
film_B_otu <- film_B_otu[rowSums(film_B_otu) > 0,]
nrow(film_B_otu)




#######################
##### Fungi #####
#######################
##### Import Data #####
otu_F <- read.table("F_otutab.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
otu_F <- as.matrix(otu_F)
rownames(otu_F) <- paste("f", rownames(otu_F), sep="")


##### Import design file #####
design_F <- read.table("metadata.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
design_F$Site <-factor(design_F$Site,c("root","soil","film"))
design_F$Treatment1 <- factor(design_F$Treatment1,c("root_CK","root_0","root_150","root_600","soil_CK","soil_0",   "soil_150","soil_600","film_150","film_600"))
design_F$con <- factor(design_F$con,c("0","150","600","CK"))
design_F$film <- factor(design_F$film,c("NO","ADD"))
design_F$Treatment2 <- factor(design_F$Treatment2,c("root_NO","root_ADD","soil_NO","soil_ADD","film_ADD"))
str(design_F)


##### Import Taxonomy #####
tax_F <- read.table("F_tax.txt", row.names=1, sep="\t", header=T ,stringsAsFactors=F,quote="")
rownames(tax_F) <- paste("f",rownames(tax_F),sep="")

# create separate taxonomy label specifying classes of Proteobacteria
tax_F$labels <- tax_F$Phylum
tax_F[ rownames(tax_F)[tax_F$Class=="Sordariomycetes" ], ]$labels <- "Sordariomycetes"
tax_F[ rownames(tax_F)[tax_F$Class=="Eurotiomycetes" ], ]$labels <- "Eurotiomycetes"
tax_F[ rownames(tax_F)[tax_F$Class=="Dothideomycetes" ], ]$labels <- "Dothideomycetes"
tax_F[ rownames(tax_F)[tax_F$Class=="Orbiliomycetes" ], ]$labels <- "Orbiliomycetes"
tax_F[ rownames(tax_F)[tax_F$Class=="Agaricomycetes" ], ]$labels <- "Agaricomycetes"
tax_F[ rownames(tax_F)[tax_F$Class=="Tremellomycetes" ], ]$labels <- "Tremellomycetes"
table(tax_F$labels)

### Defining fOTU colors by phylum (using the taxonomy file)
tax_F$cols <- tax_F$labels
table(tax_F$cols)

##### Store Cyanobacteria and mitrochrondia sequeces #####
unique(tax_F$Kingdom)
table(tax_F$Kingdom)

r3 <- rownames(tax_F[tax_F$Kingdom=="Unassigned",])
table(tax_F$Phylum)

r4 <- rownames(tax_F[tax_F$Phylum=="Unassigned",])
otus_remove_F <- c(r3,r4)

## Remove these from otu table, tax table
otu_F <- otu_F[-which(rownames(otu_F) %in% otus_remove_F),]
tax_F <- tax_F[rownames(otu_F),]
design_F <- droplevels(design_F[rownames(design_F) %in% colnames(otu_F),])
design_F <- design_F[colnames(otu_F),]
dim(otu_F)
dim(tax_F)
dim(design_F)


###### B sequence and OTU counts ######
sum(colSums(otu_F))
sort(colSums(otu_F))
median(colSums(otu_F))
nrow(tax_F)
table(tax_F$Kingdom)

## Order taxonmy file by OTU
otu_order_F <- match(rownames(otu_F), rownames(tax_F))
tax_F <- tax_F[otu_order_F,]

##### Define sample types #####
soilsamples <- rownames(design_F)[which(design_F$Site == "soil")]
rootsamples <- rownames(design_F)[which(design_F$Site == "root")]
filmsamples <- rownames(design_F)[which(design_F$Site == "film")]

##### Total number of soil / root OTUs #####
soil_F_otu <- otu_F[,soilsamples]
soil_F_otu <- soil_F_otu[rowSums(soil_F_otu) > 0,]
nrow(soil_F_otu)
root_F_otu <- otu_F[,rootsamples]
root_F_otu <- root_F_otu[rowSums(root_F_otu) > 0,]
nrow(root_F_otu)
film_F_otu <- otu_F[,filmsamples]
film_F_otu <- film_F_otu[rowSums(film_F_otu) > 0,]
nrow(film_F_otu)



#######################
##### Protozoon #####
#######################
##### Import Data #####
otu_P <- read.table("pro_otutab.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
otu_P <- as.matrix(otu_P)
rownames(otu_P) <- paste("p", rownames(otu_P), sep="")

##### Import design file #####
design_P <- read.table("metadata.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
design_P$Site <-factor(design_P$Site,c("root","soil","film"))
design_P$Treatment1 <- factor(design_P$Treatment1,c("root_CK","root_0","root_150","root_600","soil_CK","soil_0",   "soil_150","soil_600","film_150","film_600"))
design_P$con <- factor(design_P$con,c("0","150","600","CK"))
design_P$film <- factor(design_P$film,c("NO","ADD"))
design_P$Treatment2 <- factor(design_P$Treatment2,c("root_NO","root_ADD","soil_NO","soil_ADD","film_ADD"))
str(design_P)

##### Import Taxonomy #####
tax_P <- read.table("P_tax.txt", row.names=1, sep="\t", header=T ,stringsAsFactors=F,quote="")
rownames(tax_P) <- paste("p",rownames(tax_P),sep="")

# create separate taxonomy label specifying classes of Proteobacteria
tax_P$labels <- tax_P$Phylum
tax_P[ rownames(tax_P)[tax_P$Class=="Metazoa" ], ]$labels <- "Metazoa"
tax_P[ rownames(tax_P)[tax_P$Class=="Choanoflagellida" ], ]$labels <- "Choanoflagellida"
tax_P[ rownames(tax_P)[tax_P$Class=="Mesomycetozoa" ], ]$labels <- "Mesomycetozoa"
table(tax_P$labels)

### Defining bOTU colors by phylum (using the taxonomy file)
tax_P$cols <- tax_P$labels
table(tax_P$cols)

##### Store Cyanobacteria and mitrochrondia sequeces #####
unique(tax_P$Kingdom)
table(tax_P$Phylum)

## Remove these from otu table, tax table
otus_remove_P <- tax_P[ rownames(tax_P)[tax_P$Class=="Fungi" ], ]
tax_P <- tax_P[-which(rownames(tax_P) %in% rownames(otus_remove_P)),]
otu_P <- otu_P[rownames(tax_P),]
# design_P <- droplevels(design_P[rownames(design_P) %in% colnames(otu_P),])
# design_P <- design_P[colnames(otu_P),]
dim(otu_P)
dim(tax_P)
dim(design_P)


###### B sequence and OTU counts ######
sum(colSums(otu_P))
sort(colSums(otu_P))
median(colSums(otu_P))
nrow(tax_P)
table(tax_P$Kingdom)

## Order taxonmy file by OTU
otu_order_P <- match(rownames(otu_P), rownames(tax_P))
tax_P <- tax_P[otu_order_P,]

##### Define sample types #####
soilsamples <- rownames(design_P)[which(design_P$Site == "soil")]
rootsamples <- rownames(design_P)[which(design_P$Site == "root")]
filmsamples <- rownames(design_P)[which(design_P$Site == "film")]

##### Total number of soil / root OTUs #####
soil_P_otu <- otu_P[,soilsamples]
soil_P_otu <- soil_P_otu[rowSums(soil_P_otu) > 0,]
nrow(soil_P_otu)
root_P_otu <- otu_P[,rootsamples]
root_P_otu <- root_P_otu[rowSums(root_P_otu) > 0,]
nrow(root_P_otu)
film_P_otu <- otu_P[,filmsamples]
film_P_otu <- film_P_otu[rowSums(film_P_otu) > 0,]
nrow(film_P_otu)


##### TMM normalize B/F counts for whole community beta diversity analysis #####
## Apply TMM normalization to entire Bacteria data set and create phyloseq objects for later analysis
set.seed(619)

cp_otu_B <- as.data.frame(t(rrarefy(t(otu_B), min(colSums(otu_B)))))

## Create phyloseq objects
physeq_B_norm <- phyloseq(otu_table(cp_otu_B, taxa_are_rows=T),
                          tax_table(as.matrix(tax_B)),
                          sample_data(design_B))

## Create bray-curtis dissimiliartiy matrix
all_dis_B <- vegdist(t(otu_table(physeq_B_norm)),method="bray")



B_dis <- as.data.frame(as.matrix(all_dis_B))


B_soil_add <- B_dis[soil_addfilm ]
B_soil_add <- as.vector(as.dist(B_soil_add))
B_root_add <- B_dis[root_addfilm ]
B_root_add <- as.vector(as.dist(B_root_add))
B_film_add <- B_dis[film_addfilm ]
B_film_add <- as.vector(as.dist(B_film_add))
B_soil <- B_dis[soil_nofilm ]
B_soil <- as.vector(as.dist(B_soil))
B_root <- B_dis[root_nofilm ]
B_root <- as.vector(as.dist(B_root))

B_dis_dat <- data.frame(
  dis = c(B_soil, B_soil_add, B_film_add, B_root, B_root_add),
  group = factor(c(
    rep('B_soil', length(B_soil)),
    rep('B_soil_add', length(B_soil_add)), 
    rep('B_film_add', length(B_film_add)),
    rep('B_root_add', length(B_root_add)),
    rep('B_root', length(B_root))), levels = c( 'B_soil', 'B_soil_add','B_film_add',  'B_root','B_root_add'))
)


my_comparisons = list( c('B_soil_add', 'B_film_add'), c("B_root_add", "B_film_add"), c("B_film_add", "B_soil"), c("B_film_add", "B_root")  )
B_soil_dis_box <- ggplot(B_dis_dat, aes(group, dis)) +
  geom_boxplot(aes(fill = group), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Bray-Curtis dissimilarity\n')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")





##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_B <- adonis2(all_dis_B ~Site+con*Treatment1, data=design_B, permutations=9999)

##### Supplementary Table S2
paov_all_B


set.seed(619)
## Apply TMM normalization to entire Bacteria data set and create phyloseq objects for later analysis
cp_otu_F <- as.data.frame(t(rrarefy(t(otu_F), min(colSums(otu_F)))))

## Create phyloseq objects
physeq_F_norm <- phyloseq(otu_table(cp_otu_F, taxa_are_rows=T),
                          tax_table(as.matrix(tax_F)),
                          sample_data(design_F))


## Create bray-curtis dissimiliartiy matrix
all_dis_F <- vegdist(t(otu_table(physeq_F_norm)),method="bray")

F_dis <- as.data.frame(as.matrix(all_dis_F))

F_soil_add <- F_dis[soil_addfilm ]
F_soil_add <- as.vector(as.dist(F_soil_add))
F_root_add <- F_dis[root_addfilm ]
F_root_add <- as.vector(as.dist(F_root_add))
F_film_add <- F_dis[film_addfilm ]
F_film_add <- as.vector(as.dist(F_film_add))
F_soil <- F_dis[soil_nofilm ]
F_soil <- as.vector(as.dist(F_soil))
F_root <- F_dis[root_nofilm ]
F_root <- as.vector(as.dist(F_root))

F_dis_dat <- data.frame(
  dis = c( F_soil,F_soil_add, F_film_add, F_root, F_root_add),
  group = factor(c(
    rep('F_soil', length(F_soil)), 
    rep('F_soil_add', length(F_soil_add)), 
    rep('F_film_add', length(F_film_add)),
    rep('F_root_add', length(F_root_add)), 
    rep('F_root', length(F_root))), levels = c('F_soil','F_soil_add',  'F_film_add','F_root',  'F_root_add'))
)


my_comparisons = list( c('F_soil_add', 'F_film_add'), c("F_root_add", "F_film_add"), c("F_film_add", "F_soil"), c("F_film_add", "F_root")  )
F_soil_dis_box <- ggplot(F_dis_dat, aes(group, dis)) +
  geom_boxplot(aes(fill = group), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Bray-Curtis dissimilarity\n')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")



##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_F <- adonis2(all_dis_F ~Site+con*Treatment1, data=design_F, permutations=9999)

##### Supplementary Table S2
paov_all_F


set.seed(619)
## Apply TMM normalization to entire Bacteria data set and create phyloseq objects for later analysis
cp_otu_P <- as.data.frame(t(rrarefy(t(otu_P), min(colSums(otu_P)))))

## Create phyloseq objects
physeq_P_norm <- phyloseq(otu_table(cp_otu_P, taxa_are_rows=T),
                          tax_table(as.matrix(tax_P)),
                          sample_data(design_P))


## Create bray-curtis dissimiliartiy matrix
all_dis_P <- vegdist(t(otu_table(physeq_P_norm)),method="bray")

P_dis <- as.data.frame(as.matrix(all_dis_P))

P_soil_add <- P_dis[soil_addfilm ]
P_soil_add <- as.vector(as.dist(P_soil_add))
P_root_add <- P_dis[root_addfilm ]
P_root_add <- as.vector(as.dist(P_root_add))
P_film_add <- P_dis[film_addfilm ]
P_film_add <- as.vector(as.dist(P_film_add))
P_soil <- P_dis[soil_nofilm ]
P_soil <- as.vector(as.dist(P_soil))
P_root <- P_dis[root_nofilm ]
P_root <- as.vector(as.dist(P_root))

P_dis_dat <- data.frame(
  dis = c(P_soil,P_soil_add,P_film_add, P_root,  P_root_add),
  group = factor(c(
    rep('P_soil', length(P_soil)), 
    rep('P_soil_add', length(P_soil_add)), 
    rep('P_film_add', length(P_film_add)),
    rep('P_root_add', length(P_root_add)), 
    rep('P_root', length(P_root))), levels = c('P_soil','P_soil_add',  'P_film_add','P_root',  'P_root_add'))
)


my_comparisons = list( c('P_soil_add', 'P_film_add'), c("P_root_add", "P_film_add"), c("P_film_add", "P_soil"), c("P_film_add", "P_root")  )
P_soil_dis_box <- ggplot(P_dis_dat, aes(group, dis)) +
  geom_boxplot(aes(fill = group), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Bray-Curtis dissimilarity\n')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_P <- adonis2(all_dis_P ~Site+con*Treatment1, data=design_P, permutations=9999)

##### Supplementary Table S2
paov_all_P


##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of Bacteria #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_B_soil <- otu_B[, soilsamples ]
otu_B_soil <- otu_B_soil[rowSums(otu_B_soil) > 0,]
dim(otu_B_soil)
tax_soil_B <- tax_B[rownames(otu_B_soil),]
design_B_soil <- droplevels(design_B[soilsamples,])
cp_otu_B_soil <- as.data.frame(t(rrarefy(t(otu_B_soil), min(colSums(otu_B_soil)))))


## Input TMM normalized counts, taxonomy, and design of bulk soil bacteria community into phyloseq objects
## for further analysis
phy_B_soil <- otu_table(cp_otu_B_soil,taxa_are_rows=T)
phy_tax_soil_B <-tax_table(as.matrix(tax_soil_B))
phy_design_soil_B <- sample_data(design_B_soil)
physeq_soil_norm_B <- phyloseq(phy_B_soil,phy_tax_soil_B,phy_design_soil_B)
sample_data(physeq_soil_norm_B)$Site<- factor(sample_data(physeq_soil_norm_B)$Site,levels=c("root", "soil","film"))


## Create bray-curtis dissimiliartiy matrix
all_dis_B_soil <- vegdist(t(otu_table(physeq_soil_norm_B)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_B_soil <- adonis2(all_dis_B_soil ~con+Treatment1, data=design_B_soil, permutations=9999)

##### Supplementary Table S2
paov_all_B_soil



##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of B_Rotation #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_B_root <- otu_B[, rootsamples ]
otu_B_root <- otu_B_root[rowSums(otu_B_root) > 0,]
dim(otu_B_root)
tax_root_B <- tax_B[rownames(otu_B_root),]
design_B_root <- droplevels(design_B[rootsamples,])
cp_otu_B_root <- as.data.frame(t(rrarefy(t(otu_B_root), min(colSums(otu_B_root)))))


## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_B_root <- otu_table(cp_otu_B_root,taxa_are_rows=T)
phy_tax_root_B <-tax_table(as.matrix(tax_root_B))
phy_design_root_B <- sample_data(design_B_root)
physeq_root_norm_B <- phyloseq(phy_B_root,phy_tax_root_B,phy_design_root_B)
sample_data(physeq_root_norm_B)$Site<- factor(sample_data(physeq_root_norm_B)$Site,levels=c("root", "soil","film"))

## Create bray-curtis dissimiliartiy matrix
all_dis_B_root <- vegdist(t(otu_table(physeq_root_norm_B)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_B_root <- adonis2(all_dis_B_root ~con+Treatment1, data=design_B_root, permutations=9999)

##### Supplementary Table S2
paov_all_B_root



##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of B_Rotation #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_B_film <- otu_B[, filmsamples ]
otu_B_film <- otu_B_film[rowSums(otu_B_film) > 0,]
dim(otu_B_film)
tax_film_B <- tax_B[rownames(otu_B_film),]
design_B_film <- droplevels(design_B[filmsamples,])
cp_otu_B_film <- as.data.frame(t(rrarefy(t(otu_B_film), min(colSums(otu_B_film)))))


## Input TMM normalized counts, taxonomy, and design of bulk film bacteria community into phyloseq objects
## for further analysis
phy_B_film <- otu_table(cp_otu_B_film,taxa_are_rows=T)
phy_tax_film_B <-tax_table(as.matrix(tax_film_B))
phy_design_film_B <- sample_data(design_B_film)
physeq_film_norm_B <- phyloseq(phy_B_film,phy_tax_film_B,phy_design_film_B)
sample_data(physeq_film_norm_B)$Site<- factor(sample_data(physeq_film_norm_B)$Site,levels=c("root", "soil","film"))


## Create bray-curtis dissimiliartiy matrix
all_dis_B_film <- vegdist(t(otu_table(physeq_film_norm_B)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_B_film <- adonis2(all_dis_B_film ~con+Treatment1, data=design_B_film, permutations=9999)

##### Supplementary Table S2
paov_all_B_film


##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of Bacteria #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_F_soil <- otu_F[, soilsamples ]
otu_F_soil <- otu_F_soil[rowSums(otu_F_soil) > 0,]
dim(otu_F_soil)
tax_soil_F <- tax_F[rownames(otu_F_soil),]
design_F_soil <- droplevels(design_F[soilsamples,])
cp_otu_F_soil <- as.data.frame(t(rrarefy(t(otu_F_soil), min(colSums(otu_F_soil)))))


## Input TMM normalized counts, taxonomy, and design of bulk soil bacteria community into phyloseq objects
## for further analysis
phy_F_soil <- otu_table(cp_otu_F_soil,taxa_are_rows=T)
phy_tax_soil_F <-tax_table(as.matrix(tax_soil_F))
phy_design_soil_F <- sample_data(design_F_soil)
physeq_soil_norm_F <- phyloseq(phy_F_soil,phy_tax_soil_F,phy_design_soil_F)
sample_data(physeq_soil_norm_F)$Site<- factor(sample_data(physeq_soil_norm_F)$Site,levels=c("root", "soil","film"))


## Create bray-curtis dissimiliartiy matrix
all_dis_F_soil <- vegdist(t(otu_table(physeq_soil_norm_F)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_F_soil <- adonis2(all_dis_F_soil ~con+Treatment1, data=design_F_soil, permutations=9999)

##### Supplementary Table S2
paov_all_F_soil


##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of B_Rotation #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_F_root <- otu_F[, rootsamples ]
otu_F_root <- otu_F_root[rowSums(otu_F_root) > 0,]
dim(otu_F_root)
tax_root_F <- tax_F[rownames(otu_F_root),]
design_F_root <- droplevels(design_F[rootsamples,])
cp_otu_F_root <- as.data.frame(t(rrarefy(t(otu_F_root), min(colSums(otu_F_root)))))


## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_F_root <- otu_table(cp_otu_F_root,taxa_are_rows=T)
phy_tax_root_F <-tax_table(as.matrix(tax_root_F))
phy_design_root_F <- sample_data(design_F_root)
physeq_root_norm_F <- phyloseq(phy_F_root,phy_tax_root_F,phy_design_root_F)
sample_data(physeq_root_norm_F)$Site<- factor(sample_data(physeq_root_norm_F)$Site,levels=c("root", "soil","film"))


## Create bray-curtis dissimiliartiy matrix
all_dis_F_root <- vegdist(t(otu_table(physeq_root_norm_F)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_F_root <- adonis2(all_dis_F_root ~con+Treatment1, data=design_F_root, permutations=9999)

##### Supplementary Table S2
paov_all_F_root



##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of B_Rotation #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_F_film <- otu_F[, filmsamples ]
otu_F_film <- otu_F_film[rowSums(otu_F_film) > 0,]
dim(otu_F_film)
tax_film_F <- tax_F[rownames(otu_F_film),]
design_F_film <- droplevels(design_F[filmsamples,])
cp_otu_F_film <- as.data.frame(t(rrarefy(t(otu_F_film), min(colSums(otu_F_film)))))


## Input TMM normalized counts, taxonomy, and design of bulk film bacteria community into phyloseq objects
## for further analysis
phy_F_film <- otu_table(cp_otu_F_film,taxa_are_rows=T)
phy_tax_film_F <-tax_table(as.matrix(tax_film_F))
phy_design_film_F <- sample_data(design_F_film)
physeq_film_norm_F <- phyloseq(phy_F_film,phy_tax_film_F,phy_design_film_F)
sample_data(physeq_film_norm_F)$Site<- factor(sample_data(physeq_film_norm_F)$Site,levels=c("root", "soil","film"))

## Create bray-curtis dissimiliartiy matrix
all_dis_F_film <- vegdist(t(otu_table(physeq_film_norm_F)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_F_film <- adonis2(all_dis_F_film ~con+Treatment1, data=design_F_film, permutations=9999)

##### Supplementary Table S2
paov_all_F_film




##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of Bacteria #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_P_soil <- otu_P[, soilsamples ]
otu_P_soil <- otu_P_soil[rowSums(otu_P_soil) > 0,]
dim(otu_P_soil)
tax_soil_P <- tax_P[rownames(otu_P_soil),]
design_P_soil <- droplevels(design_P[soilsamples,])
cp_otu_P_soil <- as.data.frame(t(rrarefy(t(otu_P_soil), min(colSums(otu_P_soil)))))


## Input TMM normalized counts, taxonomy, and design of bulk soil bacteria community into phyloseq objects
## for further analysis
phy_P_soil <- otu_table(cp_otu_P_soil,taxa_are_rows=T)
phy_tax_soil_P <-tax_table(as.matrix(tax_soil_P))
phy_design_soil_P <- sample_data(design_P_soil)
physeq_soil_norm_P <- phyloseq(phy_P_soil,phy_tax_soil_P,phy_design_soil_P)
sample_data(physeq_soil_norm_P)$Site<- factor(sample_data(physeq_soil_norm_P)$Site,levels=c("root", "soil","film"))

## Create bray-curtis dissimiliartiy matrix
all_dis_P_soil <- vegdist(t(otu_table(physeq_soil_norm_P)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_P_soil <- adonis2(all_dis_P_soil ~con+Treatment1, data=design_F_soil, permutations=9999)

##### Supplementary Table S2
paov_all_P_soil


##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of B_Rotation #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_P_root <- otu_P[, rootsamples ]
otu_P_root <- otu_P_root[rowSums(otu_P_root) > 0,]
dim(otu_P_root)
tax_root_P <- tax_P[rownames(otu_P_root),]
design_P_root <- droplevels(design_P[rootsamples,])
cp_otu_P_root <- as.data.frame(t(rrarefy(t(otu_P_root), min(colSums(otu_P_root)))))


## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_P_root <- otu_table(cp_otu_P_root,taxa_are_rows=T)
phy_tax_root_P <-tax_table(as.matrix(tax_root_P))
phy_design_root_P <- sample_data(design_P_root)
physeq_root_norm_P <- phyloseq(phy_P_root,phy_tax_root_P,phy_design_root_P)
sample_data(physeq_root_norm_P)$Site<- factor(sample_data(physeq_root_norm_P)$Site,levels=c("root", "soil","film"))

## Create bray-curtis dissimiliartiy matrix
all_dis_P_root <- vegdist(t(otu_table(physeq_root_norm_P)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_P_root <- adonis2(all_dis_P_root ~con+Treatment1, data=design_F_root, permutations=9999)

##### Supplementary Table S2
paov_all_P_root



##### Defining  soil bacteria and fungi communities for beta diversity analysis #####
#####The beta diversity analysis of B_Rotation #####
## Apply sequence count threshold to bacteria soil community and TMM normalize counts
otu_P_film <- otu_P[, filmsamples ]
otu_P_film <- otu_P_film[rowSums(otu_P_film) > 0,]
dim(otu_P_film)
tax_film_P <- tax_P[rownames(otu_P_film),]
design_P_film <- droplevels(design_P[filmsamples,])
cp_otu_P_film <- as.data.frame(t(rrarefy(t(otu_P_film), min(colSums(otu_P_film)))))


## Input TMM normalized counts, taxonomy, and design of bulk film bacteria community into phyloseq objects
## for further analysis
phy_P_film <- otu_table(cp_otu_P_film,taxa_are_rows=T)
phy_tax_film_P <-tax_table(as.matrix(tax_film_P))
phy_design_film_P <- sample_data(design_P_film)
physeq_film_norm_P <- phyloseq(phy_P_film,phy_tax_film_P,phy_design_film_P)
sample_data(physeq_film_norm_P)$Site<- factor(sample_data(physeq_film_norm_P)$Site,levels=c("root", "soil","film"))

## Create bray-curtis dissimiliartiy matrix
all_dis_P_film <- vegdist(t(otu_table(physeq_film_norm_P)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_P_film <- adonis2(all_dis_P_film ~con+Treatment1, data=design_F_film, permutations=9999)

##### Supplementary Table S2
paov_all_P_film





##### Alpha #####
cp_B_otu_shannon <- vegan::diversity(t(cp_otu_B), index = "shannon")
design_B$Shannon <- cp_B_otu_shannon
cp_B_otu_simpson <- vegan::diversity(t(cp_otu_B), index = "simpson")
design_B$Simpson <- cp_B_otu_simpson
chao1 <- t(estimateR(t(cp_otu_B)))
chao1 <- as.data.frame(chao1)
design_B$chao1 <- chao1$S.chao1
design_B$ACE <- chao1$S.ACE

soil_NO  <- design_B[design_B$Treatment2=="soil_NO", 6 ]
soil_ADD  <- design_B[design_B$Treatment2=="soil_ADD", 6 ]
root_NO  <- design_B[design_B$Treatment2=="root_NO", 6 ]
root_ADD  <- design_B[design_B$Treatment2=="root_ADD", 6 ]
film_ADD  <- design_B[design_B$Treatment2=="film_ADD", 6 ]


my_comparisons = list(c("soil_NO", "film_ADD"),c('film_ADD', 'soil_ADD'), c("film_ADD", "root_ADD"), c("root_NO", "film_ADD")  )
Shannon_B <- ggplot(design_B, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), Shannon)) +
  geom_boxplot(aes(fill = Treatment2), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Bacteria Shannon index')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")


soil_NO  <- design_B[design_B$Treatment2=="soil_NO", 8 ]
soil_ADD  <- design_B[design_B$Treatment2=="soil_ADD", 8 ]
root_NO  <- design_B[design_B$Treatment2=="root_NO", 8 ]
root_ADD  <- design_B[design_B$Treatment2=="root_ADD", 8 ]
film_ADD  <- design_B[design_B$Treatment2=="film_ADD", 8 ]

Chao1_B <- ggplot(design_B, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), chao1)) +
  geom_boxplot(aes(fill = Treatment2), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Bacteria Chao1 index')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")


grid.newpage()
grid.arrange(Shannon_B,Chao1_B,nrow = 1)


for(i in design_B_soil[,8]) {
  fit <- aov(i~Treatment2,data = design_B_soil)
  print(summary(fit))
  out <- HSD.test(fit,"Treatment2")
  print(out$groups)
}


cp_F_otu_shannon <- vegan::diversity(t(cp_otu_F), index = "shannon")
design_F$Shannon <- cp_F_otu_shannon
cp_F_otu_simpson <- vegan::diversity(t(cp_otu_F), index = "simpson")
design_F$Simpson <- cp_F_otu_simpson
chao1 <- t(estimateR(t(cp_otu_F)))
chao1 <- as.data.frame(chao1)
design_F$chao1 <- chao1$S.chao1
design_F$ACE <- chao1$S.ACE



soil_NO  <- design_F[design_F$Treatment2=="soil_NO", 6 ]
soil_ADD  <- design_F[design_F$Treatment2=="soil_ADD", 6 ]
root_NO  <- design_F[design_F$Treatment2=="root_NO", 6 ]
root_ADD  <- design_F[design_F$Treatment2=="root_ADD", 6 ]
film_ADD  <- design_F[design_F$Treatment2=="film_ADD", 6 ]


my_comparisons = list( c('soil_NO', 'soil_ADD'), c("root_NO", "root_ADD"), c("soil_NO", "film_ADD"), c("root_NO", "film_ADD")  )
Shannon_F <- ggplot(design_F, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), Shannon)) +
  geom_boxplot(aes(fill = Treatment2), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Fungi Shannon index')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

soil_NO  <- design_F[design_F$Treatment2=="soil_NO", 8 ]
soil_ADD  <- design_F[design_F$Treatment2=="soil_ADD", 8 ]
root_NO  <- design_F[design_F$Treatment2=="root_NO", 8 ]
root_ADD  <- design_F[design_F$Treatment2=="root_ADD", 8 ]
film_ADD  <- design_F[design_F$Treatment2=="film_ADD", 8 ]

Chao1_F <- ggplot(design_F, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), chao1)) +
  geom_boxplot(aes(fill = Treatment2), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Fungi Chao1 index')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

grid.newpage()
grid.arrange(Shannon_F,Chao1_F,ncol = 2)


for(i in design_F[,5:8]) {
  fit <- aov(i~Treatment1,data = design_F)
  print(summary(fit))
  out <- HSD.test(fit,"Treatment1")
  print(out$groups)
}


cp_P_otu_shannon <- vegan::diversity(t(cp_otu_P), index = "shannon")
design_P$Shannon <- cp_P_otu_shannon
cp_P_otu_simpson <- vegan::diversity(t(cp_otu_P), index = "simpson")
design_P$Simpson <- cp_P_otu_simpson
chao1 <- t(estimateR(t(cp_otu_P)))
chao1 <- as.data.frame(chao1)
design_P$chao1 <- chao1$S.chao1
design_P$ACE <- chao1$S.ACE

soil_NO  <- design_P[design_P$Treatment2=="soil_NO", 6 ]
soil_ADD  <- design_P[design_P$Treatment2=="soil_ADD", 6 ]
root_NO  <- design_P[design_P$Treatment2=="root_NO", 6 ]
root_ADD  <- design_P[design_P$Treatment2=="root_ADD", 6 ]
film_ADD  <- design_P[design_P$Treatment2=="film_ADD", 6 ]


my_comparisons = list( c('soil_NO', 'soil_ADD'), c("root_NO", "root_ADD"), c("soil_NO", "film_ADD"), c("root_NO", "film_ADD")  )
Shannon_P <- ggplot(design_P, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), Shannon)) +
  geom_boxplot(aes(fill = Treatment2), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Protist Shannon index')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

soil_NO  <- design_P[design_P$Treatment2=="soil_NO", 8 ]
soil_ADD  <- design_P[design_P$Treatment2=="soil_ADD", 8 ]
root_NO  <- design_P[design_P$Treatment2=="root_NO", 8 ]
root_ADD  <- design_P[design_P$Treatment2=="root_ADD", 8 ]
film_ADD  <- design_P[design_P$Treatment2=="film_ADD", 8 ]


Chao1_P <- ggplot(design_P, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), chao1)) +
  geom_boxplot(aes(fill = Treatment2), width = 0.6) +
  scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2","blue","orange")) +
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none')+
  labs(x = NULL, y = 'Protist Chao1 index')+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

grid.newpage()
grid.arrange(Shannon_P,Chao1_P,ncol = 2)


for(i in design_P[,5:8]) {
  fit <- aov(i~Treatment1,data = design_P)
  print(summary(fit))
  out <- HSD.test(fit,"Treatment1")
  print(out$groups)
}




##### Supplementary Figure S4: Beta diversity (unconstrained PCoA) of bacteria/fungi soil and root communities #####

## Perform unconstrained PCoA of entire bacteria data set
pcoa_norm_B <- ordinate(physeq_B_norm,"PCoA","bray")
pcoa_all_B <- plot_ordination(physeq_B_norm, pcoa_norm_B, type="sites", color="Site", shape="con")
pcoa_all_B <- pcoa_all_B+
  geom_point(size=4)+
  xlab(paste("PCo 1", paste("(",round(pcoa_norm_B$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_norm_B$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("Bacteria Community")


##### Supplementary Figure S4: Beta diversity (unconstrained PCoA) of bacteria/fungi soil and root communities #####

## Perform unconstrained PCoA of entire bacteria data set
pcoa_norm_F <- ordinate(physeq_F_norm,"PCoA","bray")
pcoa_all_F <- plot_ordination(physeq_F_norm, pcoa_norm_F, type="sites", color="Site", shape="con")
pcoa_all_F <- pcoa_all_F+
  geom_point(size=4)+
  xlab(paste("PCo 1", paste("(",round(pcoa_norm_F$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_norm_F$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("FUNGI Community")


pcoa_norm_P <- ordinate(physeq_P_norm,"PCoA","bray")
pcoa_all_P <- plot_ordination(physeq_P_norm, pcoa_norm_P, type="sites", color="Site", shape="con")
pcoa_all_P <- pcoa_all_P+
  geom_point(size=4)+
  xlab(paste("PCo 1", paste("(",round(pcoa_norm_P$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_norm_P$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("Protist Community")


grid.newpage()
grid.arrange(pcoa_all_B,pcoa_all_F,pcoa_all_P,ncol = 3)







##### Supplementary Figure S3: phyla relative abundance plots #####

##### Bacteria

## Express B OTU counts as relative abunance percent
otu_B_RA <- t(t(otu_B)/colSums(otu_B)) * 100
colSums(otu_B_RA)
nrow(otu_B_RA)

## Get names of bacteria phyla present (use 'labels' as this specifies class within Proteobacteria)
PHYLAnames_B <- names(sort(table(tax_B[,"labels"]), decr=T))
length(PHYLAnames_B)
sort(table(tax_B[,"labels"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(otu_B_RA)
for (i in PHYLAnames_B){
  x <- array(colSums(otu_B_RA[rownames(tax_B)[which(tax_B$labels == paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}

## Create matrix
rownames(y) <- paste(PHYLAnames_B)
colnames(y) <- paste(colnames(otu_B_RA))
PHYLUM_mat_B <- y
PHYLUM_mat_B[,1:5]
colSums(PHYLUM_mat_B)
PHYLUM_mat_B_mean <- sort(apply(PHYLUM_mat_B,1,mean),decr=T)
PHYLUM_mat_B <- PHYLUM_mat_B[names(PHYLUM_mat_B_mean),]

## Soil phyla abundances
PHYLUM_mat_B_soil <- PHYLUM_mat_B[,soilsamples]
colSums(PHYLUM_mat_B_soil)
PHYLUM_mat_B_soil_mean <- sort(apply(PHYLUM_mat_B_soil,1,mean),decr=T)
PHYLUM_mat_B_soil <- PHYLUM_mat_B_soil[names(PHYLUM_mat_B_soil_mean),]
PHYLUM_mat_B_soil_se <- apply(PHYLUM_mat_B_soil,1,se)[names(PHYLUM_mat_B_soil_mean)]

length(PHYLUM_mat_B_soil_mean[PHYLUM_mat_B_soil_mean > 0])


## Root phyla abundances
PHYLUM_mat_B_root <- PHYLUM_mat_B[,rootsamples]
colSums(PHYLUM_mat_B_root)
PHYLUM_mat_B_root_mean <- apply(PHYLUM_mat_B_root,1,mean)[names(PHYLUM_mat_B_soil_mean)]
PHYLUM_mat_B_root_se <- apply(PHYLUM_mat_B_root,1,se)[names(PHYLUM_mat_B_soil_mean)]

length(PHYLUM_mat_B_root_mean[PHYLUM_mat_B_root_mean > 0])

## Film phyla abundances
PHYLUM_mat_B_film <- PHYLUM_mat_B[,filmsamples]
colSums(PHYLUM_mat_B_film)
PHYLUM_mat_B_film_mean <- sort(apply(PHYLUM_mat_B_film,1,mean),decr=T)
PHYLUM_mat_B_film <- PHYLUM_mat_B_film[names(PHYLUM_mat_B_film_mean),]
PHYLUM_mat_B_film_se <- apply(PHYLUM_mat_B_film,1,se)[names(PHYLUM_mat_B_film_mean)]

length(PHYLUM_mat_B_film_mean[PHYLUM_mat_B_film_mean > 0])



PHYLUM_mat_B_abun <- t(PHYLUM_mat_B)
PHYLUM_mat_B_abun <- as.data.frame(PHYLUM_mat_B_abun)
PHYLUM_mat_B_abun$Site <- design_B$Site
PHYLUM_mat_B_abun$con <- design_B$con

for(i in PHYLUM_mat_B_abun[,1:12]) {
  fit <- aov(i~Site,data = PHYLUM_mat_B_abun)
  print(summary(fit))
  out <- HSD.test(fit,"Site")
  print(out$groups)
}


PHYLUM_mat_B_abun_soil <- PHYLUM_mat_B_abun[soilsamples,  ]
for(i in PHYLUM_mat_B_abun_soil[,1:12]) {
  fit <- aov(i~con,data = PHYLUM_mat_B_abun_soil)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}


PHYLUM_mat_B_abun_root <- PHYLUM_mat_B_abun[rootsamples,  ]
for(i in PHYLUM_mat_B_abun_root[,1:12]) {
  fit <- aov(i~con,data = PHYLUM_mat_B_abun_root)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}

PHYLUM_mat_B_abun_film <- PHYLUM_mat_B_abun[filmsamples,  ]
for(i in PHYLUM_mat_B_abun_film[,1:12]) {
  fit <- aov(i~con,data = PHYLUM_mat_B_abun_film)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}



### Defining bOTU colors by phylum (using the taxonomy file)
tax_B$cols <- tax_B$labels
table(tax_B$cols)

# Phyla with MEAN abundances lower than 1% relative abundances
table(apply(PHYLUM_mat_B, 1, mean) < 1)
low_count_phyla_B <- rownames(PHYLUM_mat_B)[sort(apply(PHYLUM_mat_B, 1, mean), decr=T) < 1]
# attribute grey color
for(i in low_count_phyla_B){
  tax_B[ rownames(tax_B)[tax_B$Phylum==paste(i) ], ]$cols <- "lightgrey"
}
table(tax_B$cols)

# Phyla with MEAN abundances higher than 1% relative abundances
abundant_phyla_B <- rownames(PHYLUM_mat_B)[sort(apply(PHYLUM_mat_B, 1, mean), decr=T) > 1]
abundant_phyla_B
tax_B[ rownames(tax_B)[tax_B$labels=="Alphaproteobacteria" ], ]$cols <- "palegreen2"
tax_B[ rownames(tax_B)[tax_B$labels=="Betaproteobacteria" ], ]$cols <- "palegreen3"
tax_B[ rownames(tax_B)[tax_B$labels=="Gammaproteobacteria" ], ]$cols <- "palegreen4"
tax_B[ rownames(tax_B)[tax_B$labels=="Deltaproteobacteria" ], ]$cols <- "palegreen1"
tax_B[ rownames(tax_B)[tax_B$labels=="Actinobacteria" ], ]$cols <- "indianred2"
tax_B[ rownames(tax_B)[tax_B$labels=="Bacteroidetes" ], ]$cols <- "steelblue1"
tax_B[ rownames(tax_B)[tax_B$labels=="Firmicutes" ], ]$cols <- "tan1"
tax_B[ rownames(tax_B)[tax_B$labels=="Acidobacteria" ], ]$cols <- "lightsalmon4"
tax_B[ rownames(tax_B)[tax_B$labels=="Chloroflexi" ], ]$cols <- "gold1"
tax_B[ rownames(tax_B)[tax_B$labels=="Saccharibacteria" ], ]$cols <- "orchid3"
tax_B[ rownames(tax_B)[tax_B$labels=="Nitrospirae" ], ]$cols <- "palevioletred2"
tax_B[ rownames(tax_B)[tax_B$labels=="Gemmatimonadetes" ], ]$cols <- "peachpuff3"

## collaps OTU colors to prepare Phylum level colors
label_cols_B <- tax_B[, c("labels", "cols") ]
library(plyr)
PHYLA_label_cols_B <- ddply(label_cols_B, .variables="cols", .fun=unique)
rownames(PHYLA_label_cols_B) <- PHYLA_label_cols_B[,1]
PHYLA_label_cols_B <- PHYLA_label_cols_B[c(abundant_phyla_B, low_count_phyla_B),]
PHYLA_label_cols_B

## Legend for Phylum colors
PHYLA_label_cols_B_legend <- PHYLA_label_cols_B[1:13,]
PHYLA_label_cols_B_legend[13,1] <- "other"
rownames(PHYLA_label_cols_B_legend)[13] <- "other"
PHYLA_label_cols_B_legend


##### Plot Supplementary Figure S3
par(oma=c(0,0,0,0), mar=c(6,4,1,5), xpd=NA)
phylum_bar_B <- barplot(as.matrix(PHYLUM_mat_B), col=PHYLA_label_cols_B[rownames(PHYLUM_mat_B),]$cols,
                        ylim=c(0,100), xaxt="n", border=NA, las=2)
axis(1, at=phylum_bar_B, labels=design_B$Treatment1, col.axis="black", las=2, cex.axis=0.6)
title(ylab="Relative abundance (%)")
title(main="Bacteria Community")
legend(36, 80, bty="n", cex=0.7, x.intersp= 0.1, y.intersp=1,
       legend=rev(PHYLA_label_cols_B_legend$labels), 
       fill=rev(PHYLA_label_cols_B_legend$cols), 
       border=rev(PHYLA_label_cols_B_legend$cols) )



##### Fungi

## Express B OTU counts as relative abunance percent
otu_F_RA <- t(t(otu_F)/colSums(otu_F)) * 100
colSums(otu_F_RA)
nrow(otu_F_RA)

## Get names of fungi phyla present (use 'labels' as this specifies class within Proteobacteria)
PHYLAnames_F <- names(sort(table(tax_F[,"labels"]), decr=T))
length(PHYLAnames_F)
sort(table(tax_F[,"labels"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(otu_F_RA)
for (i in PHYLAnames_F){
  x <- array(colSums(otu_F_RA[rownames(tax_F)[which(tax_F$labels == paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}

## Create matrix
rownames(y) <- paste(PHYLAnames_F)
colnames(y) <- paste(colnames(otu_F_RA))
PHYLUM_mat_F <- y
PHYLUM_mat_F[,1:5]
colSums(PHYLUM_mat_F)
PHYLUM_mat_F_mean <- sort(apply(PHYLUM_mat_F,1,mean),decr=T)
PHYLUM_mat_F <- PHYLUM_mat_F[names(PHYLUM_mat_F_mean),]


## Soil phyla abundances
PHYLUM_mat_F_soil <- PHYLUM_mat_F[,soilsamples]
colSums(PHYLUM_mat_F_soil)
PHYLUM_mat_F_soil_mean <- sort(apply(PHYLUM_mat_F_soil,1,mean),decr=T)
PHYLUM_mat_F_soil <- PHYLUM_mat_F_soil[names(PHYLUM_mat_F_soil_mean),]
PHYLUM_mat_F_soil_se <- apply(PHYLUM_mat_F_soil,1,se)[names(PHYLUM_mat_F_soil_mean)]

length(PHYLUM_mat_F_soil_mean[PHYLUM_mat_F_soil_mean > 0])

## Root phyla abundances
PHYLUM_mat_F_root <- PHYLUM_mat_F[,rootsamples]
colSums(PHYLUM_mat_F_root)
PHYLUM_mat_F_root_mean <- apply(PHYLUM_mat_F_root,1,mean)[names(PHYLUM_mat_F_soil_mean)]
PHYLUM_mat_F_root_se <- apply(PHYLUM_mat_F_root,1,se)[names(PHYLUM_mat_F_soil_mean)]

length(PHYLUM_mat_F_root_mean[PHYLUM_mat_F_root_mean > 0])

## Film phyla abundances
PHYLUM_mat_F_film <- PHYLUM_mat_F[,filmsamples]
colSums(PHYLUM_mat_F_film)
PHYLUM_mat_F_film_mean <- sort(apply(PHYLUM_mat_F_film,1,mean),decr=T)
PHYLUM_mat_F_film <- PHYLUM_mat_F_film[names(PHYLUM_mat_F_film_mean),]
PHYLUM_mat_F_film_se <- apply(PHYLUM_mat_F_film,1,se)[names(PHYLUM_mat_F_film_mean)]

length(PHYLUM_mat_F_film_mean[PHYLUM_mat_F_film_mean > 0])


PHYLUM_mat_F_abun <- t(PHYLUM_mat_F)
PHYLUM_mat_F_abun <- as.data.frame(PHYLUM_mat_F_abun)
PHYLUM_mat_F_abun$Site <- design_F$Site
PHYLUM_mat_F_abun$con <- design_F$con

for(i in PHYLUM_mat_F_abun[,1:9]) {
  fit <- aov(i~Site,data = PHYLUM_mat_F_abun)
  print(summary(fit))
  out <- HSD.test(fit,"Site")
  print(out$groups)
}


PHYLUM_mat_F_abun_soil <- PHYLUM_mat_F_abun[soilsamples,  ]
for(i in PHYLUM_mat_F_abun_soil[,1:9]) {
  fit <- aov(i~con,data = PHYLUM_mat_F_abun_soil)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}


PHYLUM_mat_F_abun_root <- PHYLUM_mat_F_abun[rootsamples,  ]
for(i in PHYLUM_mat_F_abun_root[,1:9]) {
  fit <- aov(i~con,data = PHYLUM_mat_F_abun_root)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}

PHYLUM_mat_F_abun_film <- PHYLUM_mat_F_abun[filmsamples,  ]
for(i in PHYLUM_mat_F_abun_film[,1:9]) {
  fit <- aov(i~con,data = PHYLUM_mat_F_abun_film)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}



# Phyla with MEAN abundances lower than 1% relative abundances
table(apply(PHYLUM_mat_F, 1, mean) < 1)
low_count_phyla_F <- rownames(PHYLUM_mat_F)[apply(PHYLUM_mat_F, 1, mean) < 1]
# attribute grey color
for(i in low_count_phyla_F){
  tax_F[ rownames(tax_F)[tax_F$labels==paste(i) ], ]$cols <- "lightgrey"
}
table(tax_F$cols)

# Phyla with MEAN abundances higher than 1% relative abundances
phyla_F <- names(sort(apply(PHYLUM_mat_F, 1, mean), decr=T) )
phyla_F
tax_F[ rownames(tax_F)[tax_F$labels=="Sordariomycetes" ], ]$cols <- "dodgerblue"
tax_F[ rownames(tax_F)[tax_F$labels=="Eurotiomycetes" ], ]$cols <- "lightskyblue"
tax_F[ rownames(tax_F)[tax_F$labels=="Dothideomycetes" ], ]$cols <- "dodgerblue3"
tax_F[ rownames(tax_F)[tax_F$labels=="Ascomycota" ], ]$cols <- "deepskyblue"
tax_F[ rownames(tax_F)[tax_F$labels=="Agaricomycetes" ], ]$cols <- "paleturquoise1"
tax_F[ rownames(tax_F)[tax_F$labels=="Tremellomycetes" ], ]$cols <- "paleturquoise3"
tax_F[ rownames(tax_F)[tax_F$labels=="Basidiomycota" ], ]$cols <- "lightcoral"
tax_F[ rownames(tax_F)[tax_F$labels=="Mortierellomycota" ], ]$cols <- "seagreen3"
tax_F[ rownames(tax_F)[tax_F$labels=="Glomeromycota" ], ]$cols <- "paleturquoise"

## collaps OTU colors to prepare labels colors
PHYLA_label_cols_F <- tax_F[,c("labels", "cols")]
library(plyr)
PHYLA_label_cols_F <- ddply(PHYLA_label_cols_F, .variables="cols", .fun=unique)
rownames(PHYLA_label_cols_F) <- PHYLA_label_cols_F[,1]
PHYLA_label_cols_F <- PHYLA_label_cols_F[phyla_F, ]
PHYLA_label_cols_F

## Legend for Phylum colors
PHYLA_label_cols_F_legend <- PHYLA_label_cols_F[1:10,]
PHYLA_label_cols_F_legend[10, 1] <- "other"
rownames(PHYLA_label_cols_F_legend)[10] <- "other"
PHYLA_label_cols_F_legend



##### Plot Supplementary Figure S3
par(mar=c(6,4,1,5), xpd=NA)
phylum_bar_F <- barplot(as.matrix(PHYLUM_mat_F),col=PHYLA_label_cols_F[rownames(PHYLUM_mat_F),]$cols,
                        ylim=c(0,100), xaxt="n", border=NA, las=2)
axis(1, at=phylum_bar_F, labels=design_F$Treatment1, col.axis="black", las=2, cex.axis=0.6)
title(main="Fungi Community")
legend(36, 100, bty="n", cex=0.7, x.intersp=0.1, y.intersp=1, 
       legend=rev(PHYLA_label_cols_F_legend$labels),
       fill=rev(PHYLA_label_cols_F_legend$cols),
       border=rev(PHYLA_label_cols_F_legend$cols) )





##### Protist

## Express B OTU counts as relative abunance percent
otu_P_RA <- t(t(otu_P)/colSums(otu_P)) * 100
colSums(otu_P_RA)
nrow(otu_P_RA)

## Get names of fungi phyla present (use 'labels' as this specifies class within Proteobacteria)
PHYLAnames_P <- names(sort(table(tax_P[,"labels"]), decr=T))
length(PHYLAnames_P)
sort(table(tax_P[,"labels"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(otu_P_RA)
for (i in PHYLAnames_P){
  x <- array(colSums(otu_P_RA[rownames(tax_P)[which(tax_P$labels == paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}

## Create matrix
rownames(y) <- paste(PHYLAnames_P)
colnames(y) <- paste(colnames(otu_P_RA))
PHYLUM_mat_P <- y
PHYLUM_mat_P[,1:5]
colSums(PHYLUM_mat_P)
PHYLUM_mat_P_mean <- sort(apply(PHYLUM_mat_P,1,mean),decr=T)
PHYLUM_mat_P <- PHYLUM_mat_P[names(PHYLUM_mat_P_mean),]


## Soil phyla abundances
PHYLUM_mat_P_soil <- PHYLUM_mat_P[,soilsamples]
colSums(PHYLUM_mat_P_soil)
PHYLUM_mat_P_soil_mean <- sort(apply(PHYLUM_mat_P_soil,1,mean),decr=T)
PHYLUM_mat_P_soil <- PHYLUM_mat_P_soil[names(PHYLUM_mat_P_soil_mean),]
PHYLUM_mat_P_soil_se <- apply(PHYLUM_mat_P_soil,1,se)[names(PHYLUM_mat_P_soil_mean)]

length(PHYLUM_mat_P_soil_mean[PHYLUM_mat_P_soil_mean > 0])

## Root phyla abundances
PHYLUM_mat_P_root <- PHYLUM_mat_P[,rootsamples]
colSums(PHYLUM_mat_P_root)
PHYLUM_mat_P_root_mean <- apply(PHYLUM_mat_P_root,1,mean)[names(PHYLUM_mat_P_soil_mean)]
PHYLUM_mat_P_root_se <- apply(PHYLUM_mat_P_root,1,se)[names(PHYLUM_mat_P_soil_mean)]

length(PHYLUM_mat_P_root_mean[PHYLUM_mat_P_root_mean > 0])

## Film phyla abundances
PHYLUM_mat_P_film <- PHYLUM_mat_P[,filmsamples]
colSums(PHYLUM_mat_P_film)
PHYLUM_mat_P_film_mean <- sort(apply(PHYLUM_mat_P_film,1,mean),decr=T)
PHYLUM_mat_P_film <- PHYLUM_mat_P_film[names(PHYLUM_mat_P_film_mean),]
PHYLUM_mat_P_film_se <- apply(PHYLUM_mat_P_film,1,se)[names(PHYLUM_mat_P_film_mean)]

length(PHYLUM_mat_P_film_mean[PHYLUM_mat_P_film_mean > 0])


PHYLUM_mat_P_abun <- t(PHYLUM_mat_P)
PHYLUM_mat_P_abun <- as.data.frame(PHYLUM_mat_P_abun)
PHYLUM_mat_P_abun$Site <- design_P$Site
PHYLUM_mat_P_abun$con <- design_P$con

for(i in PHYLUM_mat_P_abun[,1:7]) {
  fit <- aov(i~Site,data = PHYLUM_mat_P_abun)
  print(summary(fit))
  out <- HSD.test(fit,"Site")
  print(out$groups)
}


PHYLUM_mat_P_abun_soil <- PHYLUM_mat_P_abun[soilsamples,  ]
for(i in PHYLUM_mat_P_abun_soil[,1:7]) {
  fit <- aov(i~con,data = PHYLUM_mat_P_abun_soil)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}


PHYLUM_mat_P_abun_root <- PHYLUM_mat_P_abun[rootsamples,  ]
for(i in PHYLUM_mat_P_abun_root[,1:7]) {
  fit <- aov(i~con,data = PHYLUM_mat_P_abun_root)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}

PHYLUM_mat_P_abun_film <- PHYLUM_mat_P_abun[filmsamples,  ]
for(i in PHYLUM_mat_P_abun_film[,1:7]) {
  fit <- aov(i~con,data = PHYLUM_mat_P_abun_film)
  print(summary(fit))
  out <- HSD.test(fit,"con")
  print(out$groups)
}




# Phyla with MEAN abundances lower than 1% relative abundances
table(apply(PHYLUM_mat_P, 1, mean) < 1)
low_count_phyla_P <- rownames(PHYLUM_mat_P)[apply(PHYLUM_mat_P, 1, mean) < 1]
# attribute grey color
for(i in low_count_phyla_P){
  tax_P[ rownames(tax_P)[tax_P$labels==paste(i) ], ]$cols <- "lightgrey"
}
table(tax_P$cols)

# Phyla with MEAN abundances higher than 1% relative abundances
phyla_P <- names(sort(apply(PHYLUM_mat_P, 1, mean), decr=T) )
phyla_P
tax_P[ rownames(tax_P)[tax_P$labels=="Choanoflagellida" ], ]$cols <- "#78fee0"
tax_P[ rownames(tax_P)[tax_P$labels=="Metazoa" ], ]$cols <- "#F38181"
tax_P[ rownames(tax_P)[tax_P$labels=="Alveolata" ], ]$cols <- "#ffad60"
tax_P[ rownames(tax_P)[tax_P$labels=="Amoebozoa" ], ]$cols <- "#ceefe4"
tax_P[ rownames(tax_P)[tax_P$labels=="Archaeplastida" ], ]$cols <- "#9dd3a8"
tax_P[ rownames(tax_P)[tax_P$labels=="Rhizaria" ], ]$cols <- "#96ceb4"
tax_P[ rownames(tax_P)[tax_P$labels=="Stramenopiles" ], ]$cols <- "#feda77"

## collaps OTU colors to prepare labels colors
PHYLA_label_cols_P <- tax_P[,c("labels", "cols")]
library(plyr)
PHYLA_label_cols_P <- ddply(PHYLA_label_cols_P, .variables="cols", .fun=unique)
rownames(PHYLA_label_cols_P) <- PHYLA_label_cols_P[,1]
PHYLA_label_cols_P <- PHYLA_label_cols_P[phyla_P, ]
PHYLA_label_cols_P

## Legend for Phylum colors
PHYLA_label_cols_P_legend <- PHYLA_label_cols_P[1:8,]
PHYLA_label_cols_P_legend[8, 1] <- "other"
rownames(PHYLA_label_cols_P_legend)[7] <- "other"
PHYLA_label_cols_P_legend



##### Plot Supplementary Figure S3
par(mar=c(6,4,1,5), xpd=NA)
phylum_bar_P <- barplot(as.matrix(PHYLUM_mat_P),col=PHYLA_label_cols_P[rownames(PHYLUM_mat_P),]$cols,
                        ylim=c(0,100), xaxt="n", border=NA, las=2)
axis(1, at=phylum_bar_P, labels=design_P$Treatment1, col.axis="black", las=2, cex.axis=0.6)
title(main="Protist Community")
legend(36, 100, bty="n", cex=0.7, x.intersp=0.1, y.intersp=1, 
       legend=rev(PHYLA_label_cols_P_legend$labels),
       fill=rev(PHYLA_label_cols_P_legend$cols),
       border=rev(PHYLA_label_cols_P_legend$cols) )





## Soil
soil_addfilm <- rownames(design_B)[intersect(which(design_B$film == "ADD"),which(design_B$Site == "soil"))]

soil_cp_otu_B_addfilm <- cp_otu_B[,soil_addfilm]
soil_cp_otu_B_addfilm <- soil_cp_otu_B_addfilm[rowSums(soil_cp_otu_B_addfilm) > 0,]
keep_soil_B_addfilm <- which(rowSums(soil_cp_otu_B_addfilm >= 2) >= 4)

soil_cp_otu_B_addfilm <- soil_cp_otu_B_addfilm[keep_soil_B_addfilm,]

nrow(soil_cp_otu_B_addfilm)

soil_tax_B_add <- tax_B[rownames(soil_cp_otu_B_addfilm),]
soil_design_B_add <- droplevels(design_B[soil_addfilm,])



soil_addfilm <- rownames(design_F)[intersect(which(design_F$film == "ADD"),which(design_F$Site == "soil"))]

soil_cp_otu_F_addfilm <- cp_otu_F[,soil_addfilm]
soil_cp_otu_F_addfilm <- soil_cp_otu_F_addfilm[rowSums(soil_cp_otu_F_addfilm) > 0,]
keep_soil_F_addfilm <- which(rowSums(soil_cp_otu_F_addfilm >= 2) >= 4)

soil_cp_otu_F_addfilm <- soil_cp_otu_F_addfilm[keep_soil_F_addfilm,]

nrow(soil_cp_otu_F_addfilm)

soil_tax_F_add <- tax_F[rownames(soil_cp_otu_F_addfilm),]
soil_design_F_add <- droplevels(design_F[soil_addfilm,])



soil_addfilm <- rownames(design_P)[intersect(which(design_P$film == "ADD"),which(design_P$Site == "soil"))]

soil_cp_otu_P_addfilm <- cp_otu_P[,soil_addfilm]
soil_cp_otu_P_addfilm <- soil_cp_otu_P_addfilm[rowSums(soil_cp_otu_P_addfilm) > 0,]
keep_soil_P_addfilm <- which(rowSums(soil_cp_otu_P_addfilm >= 2) >= 4)

soil_cp_otu_P_addfilm <- soil_cp_otu_P_addfilm[keep_soil_P_addfilm,]

nrow(soil_cp_otu_P_addfilm)

soil_tax_P_add <- tax_P[rownames(soil_cp_otu_P_addfilm),]
soil_design_P_add <- droplevels(design_P[soil_addfilm,])



otu_cp_soil_combine <- rbind(soil_cp_otu_B_addfilm, soil_cp_otu_F_addfilm, soil_cp_otu_P_addfilm)

soil_tax_B_add <- soil_tax_B_add[,-c(5:10)]
soil_tax_F_add <- soil_tax_F_add[,-c(5:10)]
soil_tax_P_add <- soil_tax_P_add[,-c(5:10)]

otu_cp_soil_combine_tax <- rbind(soil_tax_B_add, soil_tax_F_add, soil_tax_P_add)


add_otu_cor_soil <- rcorr(t(otu_cp_soil_combine), type=c("spearman"))

## Create data frame of co-occurring OTUs
add_cor_df_soil <- CorrDF(add_otu_cor_soil$r, add_otu_cor_soil$P)
add_cor_df_soil$padj <- p.adjust(add_cor_df_soil$p, method="none")

## Subset data frame for co-occurring OTUs with Spearman's rho > 0.5 and a p-value < 0.001
add_cor_df_padj_soil <- add_cor_df_soil[which(add_cor_df_soil$cor > 0.7| add_cor_df_soil$cor < -0.7),]
add_cor_df_padj_soil <- add_cor_df_padj_soil[which(add_cor_df_padj_soil$padj < 0.001),]

## Make node attribute table
nodeattrib_add_soil <- data.frame(node = union(add_cor_df_padj_soil$from,add_cor_df_padj_soil$to))
nodeattrib_add_soil$Kingdom <- 0

for (i in as.character(nodeattrib_add_soil$node))
{
  if (i %in% rownames(otu_cp_soil_combine_tax) == TRUE)
  {nodeattrib_add_soil[nodeattrib_add_soil$node==i,"Kingdom"] <- paste(otu_cp_soil_combine_tax[i,1:1])}
  else
  { nodeattrib_add_soil[nodeattrib_add_soil$node==i,"Kingdom"]<- "NA"}
}


## Create co-occurrence network with igraph
add_net_soil <- graph_from_data_frame(add_cor_df_padj_soil, direct=F, vertices=nodeattrib_add_soil)

## Calculate relative abudnance of OTU nodes
soil_add_ra <- apply(otu_cp_soil_combine,1,mean)
soil_add_ra <- B_add_ra[V(add_net_soil)$name]

## Network properties ##

## Number of bacteria and fungi nodes
length(grep("bASV*",names(V(add_net_soil))))
length(grep("fASV*",names(V(add_net_soil))))
length(grep("pASV*",names(V(add_net_soil))))


## Number of edges in network
length(E(add_net_soil))

## Connections 
bb_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor>0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor>0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor>0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor>0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor>0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor>0,]
nrow(pf_occur_soil)

bb_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor<0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor<0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor<0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor<0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor<0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(add_cor_df_padj_soil[with(add_cor_df_padj_soil, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor<0,]
nrow(pf_occur_soil)




mean(E(add_net_soil))

graph.density(add_net_soil)

add_net_soil_cfg <- cluster_fast_greedy(as.undirected(add_net_soil))
add_net_soil_modules <- sort(table(membership(add_net_soil_cfg)),decr=T)

transitivity(add_net_soil)

add_net_soil_betweenness <- betweenness(add_net_soil,normalized = T)
add_net_soil_degree <- igraph::degree(add_net_soil)

nodeattrib_add_soil$degree <- add_net_soil_degree



# ec <- edge.betweenness.community(add_net_soil)
# print(modularity(ec))

# write.table(add_net_soil_degree,paste0("add_net_soil_degree.txt"),sep="\t",quote=F)
# add_net_soil_degree <- read.table("add_net_soil_degree.txt", sep="\t", header=T, blank.lines.skip=F, check.names=F,row.names = 1)
# 
# add_net_soil_degree$Phylum <- factor(add_net_soil_degree$Phylum)
# 
# F_ADD_degree <- ggplot(add_net_soil_degree, aes(x=factor(Phylum,levels = c("Acidobacteria","Actinobacteria","Alphaproteobacteria","Betaproteobacteria","Bacteroidetes","Chloroflexi","Firmicutes","Gemmatimonadetes")), y=attribute,fill =Phylum))+
#   geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
#   theme_bw()+
#   theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none',axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+
#   labs(x="Site", y="Degree of nodes")

all_soil_topological <- cbind(add_net_soil_betweenness,add_net_soil_degree)

all_soil_topological_data <- as.data.frame(all_soil_topological)
all_soil_topological_data$node <- rownames(all_soil_topological_data)
all_soil_topological_data$Kingdom <- 0

a <- str_which(all_soil_topological_data$node,'bASV')
all_soil_topological_data$Kingdom[a ] <- 'Bacteria'

b <- str_which(all_soil_topological_data$node,'fASV')
all_soil_topological_data$Kingdom[b ] <- 'Fungi'

c <- str_which(all_soil_topological_data$node,'pASV')
all_soil_topological_data$Kingdom[c ] <- 'Protist'

Bacteria  <- all_soil_topological_data[all_soil_topological_data$Kingdom=="Bacteria", 2 ]
Fungi  <- all_soil_topological_data[all_soil_topological_data$Kingdom=="Fungi", 2 ]
Protist  <- all_soil_topological_data[all_soil_topological_data$Kingdom=="Protist", 2 ]
my_comparisons = list( c('Bacteria', 'Fungi'), c("Fungi", "Protist"), c("Bacteria", "Protist"))

all_soil_net_plot_degree <- ggplot(data = all_soil_topological_data,aes(x=factor(Kingdom,levels = c("Bacteria","Fungi","Protist")),y=add_net_soil_degree))+ geom_boxplot(outlier.shape = NA)+geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")


Bacteria  <- all_soil_topological_data[all_soil_topological_data$Kingdom=="Bacteria", 1 ]
Fungi  <- all_soil_topological_data[all_soil_topological_data$Kingdom=="Fungi", 1 ]
Protist  <- all_soil_topological_data[all_soil_topological_data$Kingdom=="Protist", 1 ]

all_soil_net_plot_betweenness <- ggplot(data = all_soil_topological_data,aes(x=Kingdom,y=add_net_soil_betweenness))+ geom_boxplot(outlier.shape = NA)+  ylim (0, 0.01)+geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")


plot(add_net_soil_betweenness,add_net_soil_degree)
# # 
# B_ADD_topological <- cbind(add_net_soil_betweenness,add_net_soil_degree)
# 
# B_ADD_topological_data <- as.data.frame(B_ADD_topological)
# B_ADD_topological_data$node <- rownames(B_ADD_topological_data)
# B_ADD_topological_data$Kingdom <- 0
# 
# a <- str_which(B_ADD_topological_data$node,'bASV')
# B_ADD_topological_data$Kingdom[a ] <- 'Bacteria'
# 
# b <- str_which(B_ADD_topological_data$node,'fASV')
# B_ADD_topological_data$Kingdom[b ] <- 'Fungi'
# 
# c <- str_which(B_ADD_topological_data$node,'pASV')
# B_ADD_topological_data$Kingdom[c ] <- 'Protist'
# 
# B_ADD_topological <- ggplot(data = B_ADD_topological_data,aes(x=add_net_soil_betweenness,y=add_net_soil_degree,colour =Kingdom))+geom_point( size = 3)+scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2"))

## Calculate network node degrees/max/min
B_ADD_deg <- sort(igraph::degree(add_net_soil,mode="all"),decr=T)
max(B_ADD_deg)
mean(B_ADD_deg)

## Set node colors based upon sensitivity to management system
cs <- c("Bacteria","Fungi","Eukaryota")
unique(V(add_net_soil)$Kingdom)
V(add_net_soil)$color <- V(add_net_soil)$Kingdom
V(add_net_soil)$color[V(add_net_soil)$color == "Bacteria"] <- "dodgerblue"
V(add_net_soil)$color[V(add_net_soil)$color == "Fungi"] <- "firebrick2"
V(add_net_soil)$color[V(add_net_soil)$color == "Eukaryota"] <- "goldenrod2"
V(add_net_soil)$frame.color <- V(add_net_soil)$color

## Set node shape
V(add_net_soil)$shape <- "circle"

## Set node size
V(add_net_soil)$size <- V(add_net_soil)$name
V(add_net_soil)$size <- log(nodeattrib_add_soil$degree)
add_net_soil_sizes <- as.numeric(V(add_net_soil)$size)




## Root
root_addfilm <- rownames(design_B)[intersect(which(design_B$film == "ADD"),which(design_B$Site == "root"))]

root_cp_otu_B_addfilm <- cp_otu_B[,root_addfilm]
root_cp_otu_B_addfilm <- root_cp_otu_B_addfilm[rowSums(root_cp_otu_B_addfilm) > 0,]
keep_root_B_addfilm <- which(rowSums(root_cp_otu_B_addfilm >= 2) >= 4)

root_cp_otu_B_addfilm <- root_cp_otu_B_addfilm[keep_root_B_addfilm,]

nrow(root_cp_otu_B_addfilm)

root_tax_B_add <- tax_B[rownames(root_cp_otu_B_addfilm),]
root_design_B_add <- droplevels(design_B[root_addfilm,])



root_addfilm <- rownames(design_F)[intersect(which(design_F$film == "ADD"),which(design_F$Site == "root"))]

root_cp_otu_F_addfilm <- cp_otu_F[,root_addfilm]
root_cp_otu_F_addfilm <- root_cp_otu_F_addfilm[rowSums(root_cp_otu_F_addfilm) > 0,]
keep_root_F_addfilm <- which(rowSums(root_cp_otu_F_addfilm >= 2) >= 4)

root_cp_otu_F_addfilm <- root_cp_otu_F_addfilm[keep_root_F_addfilm,]

nrow(root_cp_otu_F_addfilm)

root_tax_F_add <- tax_F[rownames(root_cp_otu_F_addfilm),]
root_design_F_add <- droplevels(design_F[root_addfilm,])



root_addfilm <- rownames(design_P)[intersect(which(design_P$film == "ADD"),which(design_P$Site == "root"))]

root_cp_otu_P_addfilm <- cp_otu_P[,root_addfilm]
root_cp_otu_P_addfilm <- root_cp_otu_P_addfilm[rowSums(root_cp_otu_P_addfilm) > 0,]
keep_root_P_addfilm <- which(rowSums(root_cp_otu_P_addfilm >= 2) >= 4)

root_cp_otu_P_addfilm <- root_cp_otu_P_addfilm[keep_root_P_addfilm,]

nrow(root_cp_otu_P_addfilm)

root_tax_P_add <- tax_P[rownames(root_cp_otu_P_addfilm),]
root_design_P_add <- droplevels(design_P[root_addfilm,])

otu_cp_root_combine <- rbind(root_cp_otu_B_addfilm, root_cp_otu_F_addfilm, root_cp_otu_P_addfilm)

root_tax_B_add <- root_tax_B_add[,-c(5:10)]
root_tax_F_add <- root_tax_F_add[,-c(5:10)]
root_tax_P_add <- root_tax_P_add[,-c(5:10)]

otu_cp_root_combine_tax <- rbind(root_tax_B_add, root_tax_F_add, root_tax_P_add)


add_otu_cor_root <- rcorr(t(otu_cp_root_combine), type=c("spearman"))

## Create data frame of co-occurring OTUs
add_cor_df_root <- CorrDF(add_otu_cor_root$r, add_otu_cor_root$P)
add_cor_df_root$padj <- p.adjust(add_cor_df_root$p, method="none")

## Subset data frame for co-occurring OTUs with Spearman's rho > 0.5 and a p-value < 0.001
add_cor_df_padj_root <- add_cor_df_root[which(add_cor_df_root$cor > 0.7| add_cor_df_root$cor < -0.7),]
add_cor_df_padj_root <- add_cor_df_padj_root[which(add_cor_df_padj_root$padj < 0.001),]

## Make node attribute table
nodeattrib_add_root <- data.frame(node = union(add_cor_df_padj_root$from,add_cor_df_padj_root$to))
nodeattrib_add_root$Kingdom <- 0

for (i in as.character(nodeattrib_add_root$node))
{
  if (i %in% rownames(otu_cp_root_combine_tax) == TRUE)
  {nodeattrib_add_root[nodeattrib_add_root$node==i,"Kingdom"] <- paste(otu_cp_root_combine_tax[i,1:1])}
  else
  { nodeattrib_add_root[nodeattrib_add_root$node==i,"Kingdom"]<- "NA"}
}


## Create co-occurrence network with igraph
add_net_root <- graph_from_data_frame(add_cor_df_padj_root, direct=F, vertices=nodeattrib_add_root)

## Calculate relative abudnance of OTU nodes
root_add_ra <- apply(otu_cp_root_combine,1,mean)
root_add_ra <- B_add_ra[V(add_net_root)$name]

## Network properties ##

## Number of bacteria and fungi nodes
length(grep("bASV*",names(V(add_net_root))))
length(grep("fASV*",names(V(add_net_root))))
length(grep("pASV*",names(V(add_net_root))))


## Number of edges in network
length(E(add_net_root))

## Connections 
bb_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor>0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor>0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor>0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor>0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor>0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor>0,]
nrow(pf_occur_soil)

bb_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor<0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor<0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor<0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor<0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor<0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(add_cor_df_padj_root[with(add_cor_df_padj_root, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor<0,]
nrow(pf_occur_soil)



mean(E(add_net_root))

graph.density(add_net_root)

add_net_root_cfg <- cluster_fast_greedy(as.undirected(add_net_root))
add_net_root_modules <- sort(table(membership(add_net_root_cfg)),decr=T)

transitivity(add_net_root)

add_net_root_betweenness <- betweenness(add_net_root,normalized = T)
add_net_root_degree <- igraph::degree(add_net_root)

nodeattrib_add_root$degree <- add_net_root_degree

# ec <- edge.betweenness.community(add_net_root)
# print(modularity(ec))

# write.table(add_net_root_degree,paste0("add_net_root_degree.txt"),sep="\t",quote=F)
# add_net_root_degree <- read.table("add_net_root_degree.txt", sep="\t", header=T, blank.lines.skip=F, check.names=F,row.names = 1)
# 
# add_net_root_degree$Phylum <- factor(add_net_root_degree$Phylum)
# 
# F_ADD_degree <- ggplot(add_net_root_degree, aes(x=factor(Phylum,levels = c("Acidobacteria","Actinobacteria","Alphaproteobacteria","Betaproteobacteria","Bacteroidetes","Chloroflexi","Firmicutes","Gemmatimonadetes")), y=attribute,fill =Phylum))+
#   geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
#   theme_bw()+
#   theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none',axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+
#   labs(x="Site", y="Degree of nodes")

all_root_topological <- cbind(add_net_root_betweenness,add_net_root_degree)

all_root_topological_data <- as.data.frame(all_root_topological)
all_root_topological_data$node <- rownames(all_root_topological_data)
all_root_topological_data$Kingdom <- 0

a <- str_which(all_root_topological_data$node,'bASV')
all_root_topological_data$Kingdom[a ] <- 'Bacteria'

b <- str_which(all_root_topological_data$node,'fASV')
all_root_topological_data$Kingdom[b ] <- 'Fungi'

c <- str_which(all_root_topological_data$node,'pASV')
all_root_topological_data$Kingdom[c ] <- 'Protist'

Bacteria  <- all_root_topological_data[all_root_topological_data$Kingdom=="Bacteria", 2 ]
Fungi  <- all_root_topological_data[all_root_topological_data$Kingdom=="Fungi", 2 ]
Protist  <- all_root_topological_data[all_root_topological_data$Kingdom=="Protist", 2 ]

all_root_net_plot_degree <- ggplot(data = all_root_topological_data,aes(x=Kingdom,y=add_net_root_degree))+ geom_boxplot(outlier.shape = NA)+  geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

Bacteria  <- all_root_topological_data[all_root_topological_data$Kingdom=="Bacteria", 1 ]
Fungi  <- all_root_topological_data[all_root_topological_data$Kingdom=="Fungi", 1 ]
Protist  <- all_root_topological_data[all_root_topological_data$Kingdom=="Protist", 1 ]

all_root_net_plot_betweenness <- ggplot(data = all_root_topological_data,aes(x=Kingdom,y=add_net_root_betweenness))+ geom_boxplot(outlier.shape = NA)+  ylim (0, 0.03)+geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+  stat_compare_means(comparisons = my_comparisons,
                                                                                                                                                                                                                                                          label = "p.signif",
                                                                                                                                                                                                                                                          method = "t.test")


plot(add_net_root_betweenness,add_net_root_degree)
# 
B_ADD_topological <- cbind(add_net_root_betweenness,add_net_root_degree)

B_ADD_topological_data <- as.data.frame(B_ADD_topological)
B_ADD_topological_data$node <- rownames(B_ADD_topological_data)
# B_ADD_topological_data$Kingdom <- 0
# 
# a <- str_which(B_ADD_topological_data$node,'bASV')
# B_ADD_topological_data$Kingdom[a ] <- 'Bacteria'
# 
# b <- str_which(B_ADD_topological_data$node,'fASV')
# B_ADD_topological_data$Kingdom[b ] <- 'Fungi'
# 
# c <- str_which(B_ADD_topological_data$node,'pASV')
# B_ADD_topological_data$Kingdom[c ] <- 'Protist'
# 
# 
# B_ADD_topological <- ggplot(data = B_ADD_topological_data,aes(x=add_net_root_betweenness,y=add_net_root_degree,colour =Kingdom))+geom_point( size = 3)+scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2"))



## Calculate network node degrees/max/min
B_ADD_deg <- sort(degree(add_net_root,mode="all"),decr=T)
max(B_ADD_deg)
mean(B_ADD_deg)

## Set node colors based upon sensitivity to management system
cs <- c("Bacteria","Fungi","Eukaryota")
unique(V(add_net_root)$Kingdom)
V(add_net_root)$color <- V(add_net_root)$Kingdom
V(add_net_root)$color[V(add_net_root)$color == "Bacteria"] <- "dodgerblue"
V(add_net_root)$color[V(add_net_root)$color == "Fungi"] <- "firebrick2"
V(add_net_root)$color[V(add_net_root)$color == "Eukaryota"] <- "goldenrod2"
V(add_net_root)$frame.color <- V(add_net_root)$color

## Set node shape
V(add_net_root)$shape <- "circle"

## Set node size
V(add_net_root)$size <- V(add_net_root)$name
V(add_net_root)$size <- log(nodeattrib_add_root$degree)
add_net_root_sizes <- as.numeric(V(add_net_root)$size)




## Film
film_addfilm <- rownames(design_B)[intersect(which(design_B$film == "ADD"),which(design_B$Site == "film"))]

film_cp_otu_B_addfilm <- cp_otu_B[,film_addfilm]
film_cp_otu_B_addfilm <- film_cp_otu_B_addfilm[rowSums(film_cp_otu_B_addfilm) > 0,]
keep_film_B_addfilm <- which(rowSums(film_cp_otu_B_addfilm >= 2) >= 4)

film_cp_otu_B_addfilm <- film_cp_otu_B_addfilm[keep_film_B_addfilm,]

nrow(film_cp_otu_B_addfilm)

film_tax_B_add <- tax_B[rownames(film_cp_otu_B_addfilm),]
film_design_B_add <- droplevels(design_B[film_addfilm,])



film_addfilm <- rownames(design_F)[intersect(which(design_F$film == "ADD"),which(design_F$Site == "film"))]

film_cp_otu_F_addfilm <- cp_otu_F[,film_addfilm]
film_cp_otu_F_addfilm <- film_cp_otu_F_addfilm[rowSums(film_cp_otu_F_addfilm) > 0,]
keep_film_F_addfilm <- which(rowSums(film_cp_otu_F_addfilm >= 2) >= 4)

film_cp_otu_F_addfilm <- film_cp_otu_F_addfilm[keep_film_F_addfilm,]

nrow(film_cp_otu_F_addfilm)

film_tax_F_add <- tax_F[rownames(film_cp_otu_F_addfilm),]
film_design_F_add <- droplevels(design_F[film_addfilm,])



film_addfilm <- rownames(design_P)[intersect(which(design_P$film == "ADD"),which(design_P$Site == "film"))]

film_cp_otu_P_addfilm <- cp_otu_P[,film_addfilm]
film_cp_otu_P_addfilm <- film_cp_otu_P_addfilm[rowSums(film_cp_otu_P_addfilm) > 0,]
keep_film_P_addfilm <- which(rowSums(film_cp_otu_P_addfilm >= 2) >= 4)

film_cp_otu_P_addfilm <- film_cp_otu_P_addfilm[keep_film_P_addfilm,]


nrow(film_cp_otu_P_addfilm)

film_tax_P_add <- tax_P[rownames(film_cp_otu_P_addfilm),]
film_design_P_add <- droplevels(design_P[film_addfilm,])

otu_cp_film_combine <- rbind(film_cp_otu_B_addfilm, film_cp_otu_F_addfilm, film_cp_otu_P_addfilm)

film_tax_B_add <- film_tax_B_add[,-c(5:10)]
film_tax_F_add <- film_tax_F_add[,-c(5:10)]
film_tax_P_add <- film_tax_P_add[,-c(5:10)]

otu_cp_film_combine_tax <- rbind(film_tax_B_add, film_tax_F_add, film_tax_P_add)


add_otu_cor_film <- rcorr(t(otu_cp_film_combine), type=c("spearman"))

## Create data frame of co-occurring OTUs
add_cor_df_film <- CorrDF(add_otu_cor_film$r, add_otu_cor_film$P)
add_cor_df_film$padj <- p.adjust(add_cor_df_film$p, method="none")

## Subset data frame for co-occurring OTUs with Spearman's rho > 0.5 and a p-value < 0.001
add_cor_df_padj_film <- add_cor_df_film[which(add_cor_df_film$cor > 0.7| add_cor_df_film$cor < -0.7),]
add_cor_df_padj_film <- add_cor_df_padj_film[which(add_cor_df_padj_film$padj < 0.001),]

## Make node attribute table
nodeattrib_add_film <- data.frame(node = union(add_cor_df_padj_film$from,add_cor_df_padj_film$to))
nodeattrib_add_film$Kingdom <- 0

for (i in as.character(nodeattrib_add_film$node))
{
  if (i %in% rownames(otu_cp_film_combine_tax) == TRUE)
  {nodeattrib_add_film[nodeattrib_add_film$node==i,"Kingdom"] <- paste(otu_cp_film_combine_tax[i,1:1])}
  else
  { nodeattrib_add_film[nodeattrib_add_film$node==i,"Kingdom"]<- "NA"}
}


## Create co-occurrence network with igraph
add_net_film <- graph_from_data_frame(add_cor_df_padj_film, direct=F, vertices=nodeattrib_add_film)

## Calculate relative abudnance of OTU nodes
film_add_ra <- apply(otu_cp_film_combine,1,mean)
film_add_ra <- B_add_ra[V(add_net_film)$name]

## Network properties ##

## Number of bacteria and fungi nodes
length(grep("bASV*",names(V(add_net_film))))
length(grep("fASV*",names(V(add_net_film))))
length(grep("pASV*",names(V(add_net_film))))


## Number of edges in network
length(E(add_net_film))

## Connections 
bb_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor>0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor>0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor>0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor>0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor>0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor>0,]
nrow(pf_occur_soil)

bb_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor<0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor<0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor<0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor<0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor<0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(add_cor_df_padj_film[with(add_cor_df_padj_film, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor<0,]
nrow(pf_occur_soil)



mean(E(add_net_film))

graph.density(add_net_film)

add_net_film_cfg <- cluster_fast_greedy(as.undirected(add_net_film))
add_net_film_modules <- sort(table(membership(add_net_film_cfg)),decr=T)

transitivity(add_net_film)

add_net_film_betweenness <- betweenness(add_net_film,normalized = T)
add_net_film_degree <- igraph::degree(add_net_film)

nodeattrib_add_film$degree <- add_net_film_degree

# ec <- edge.betweenness.community(add_net_film)
# print(modularity(ec))

# write.table(add_net_film_degree,paste0("add_net_film_degree.txt"),sep="\t",quote=F)
# add_net_film_degree <- read.table("add_net_film_degree.txt", sep="\t", header=T, blank.lines.skip=F, check.names=F,row.names = 1)
# 
# add_net_film_degree$Phylum <- factor(add_net_film_degree$Phylum)
# 
# F_ADD_degree <- ggplot(add_net_film_degree, aes(x=factor(Phylum,levels = c("Acidobacteria","Actinobacteria","Alphaproteobacteria","Betaproteobacteria","Bacteroidetes","Chloroflexi","Firmicutes","Gemmatimonadetes")), y=attribute,fill =Phylum))+
#   geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
#   theme_bw()+
#   theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none',axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+
#   labs(x="Site", y="Degree of nodes")



all_film_topological <- cbind(add_net_film_betweenness,add_net_film_degree)

all_film_topological_data <- as.data.frame(all_film_topological)
all_film_topological_data$node <- rownames(all_film_topological_data)
all_film_topological_data$Kingdom <- 0

a <- str_which(all_film_topological_data$node,'bASV')
all_film_topological_data$Kingdom[a ] <- 'Bacteria'

b <- str_which(all_film_topological_data$node,'fASV')
all_film_topological_data$Kingdom[b ] <- 'Fungi'

c <- str_which(all_film_topological_data$node,'pASV')
all_film_topological_data$Kingdom[c ] <- 'Protist'

Bacteria  <- all_film_topological_data[all_film_topological_data$Kingdom=="Bacteria", 2 ]
Fungi  <- all_film_topological_data[all_film_topological_data$Kingdom=="Fungi", 2 ]
Protist  <- all_film_topological_data[all_film_topological_data$Kingdom=="Protist", 2 ]

all_film_net_plot_degree <- ggplot(data = all_film_topological_data,aes(x=Kingdom,y=add_net_film_degree))+ geom_boxplot(outlier.shape = NA)+geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

Bacteria  <- all_film_topological_data[all_film_topological_data$Kingdom=="Bacteria", 1 ]
Fungi  <- all_film_topological_data[all_film_topological_data$Kingdom=="Fungi", 1 ]
Protist  <- all_film_topological_data[all_film_topological_data$Kingdom=="Protist", 1 ]

all_film_net_plot_betweenness <- ggplot(data = all_film_topological_data,aes(x=Kingdom,y=add_net_film_betweenness))+ geom_boxplot(outlier.shape = NA)+   ylim (0, 0.01)+geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")


plot(add_net_film_betweenness,add_net_film_degree)

# B_ADD_topological <- cbind(add_net_film_betweenness,add_net_film_degree)
# 
# B_ADD_topological_data <- as.data.frame(B_ADD_topological)
# B_ADD_topological_data$node <- rownames(B_ADD_topological_data)
# B_ADD_topological_data$Kingdom <- 0
# 
# a <- str_which(B_ADD_topological_data$node,'bASV')
# B_ADD_topological_data$Kingdom[a ] <- 'Bacteria'
# 
# b <- str_which(B_ADD_topological_data$node,'fASV')
# B_ADD_topological_data$Kingdom[b ] <- 'Fungi'
# 
# c <- str_which(B_ADD_topological_data$node,'pASV')
# B_ADD_topological_data$Kingdom[c ] <- 'Protist'
# 
# 
# B_ADD_topological <- ggplot(data = B_ADD_topological_data,aes(x=add_net_film_betweenness,y=add_net_film_degree,colour =Kingdom))+geom_point( size = 3)+scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2"))

## Calculate network node degrees/max/min
B_ADD_deg <- sort(degree(add_net_film,mode="all"),decr=T)
max(B_ADD_deg)
mean(B_ADD_deg)

## Set node colors based upon sensitivity to management system
cs <- c("Bacteria","Fungi","Eukaryota")
unique(V(add_net_film)$Kingdom)
V(add_net_film)$color <- V(add_net_film)$Kingdom
V(add_net_film)$color[V(add_net_film)$color == "Bacteria"] <- "dodgerblue"
V(add_net_film)$color[V(add_net_film)$color == "Fungi"] <- "firebrick2"
V(add_net_film)$color[V(add_net_film)$color == "Eukaryota"] <- "goldenrod2"
V(add_net_film)$frame.color <- V(add_net_film)$color

## Set node shape
V(add_net_film)$shape <- "circle"

## Set node size
V(add_net_film)$size <- V(add_net_film)$name
V(add_net_film)$size <- log(nodeattrib_add_film$degree)
add_net_film_sizes <- as.numeric(V(add_net_film)$size)





#####  Figure S13 : Individual Co-occurence networks #####

## Note:the permutations of the network layouts is very time consuming and processor intensive
## Set layouts of the networks with Fruchterman & Reingold algorithim
# set.seed(619)
# coords_all_soil <- layout_(add_net_soil,with_fr(niter=9999, grid="nogrid"))
# write.table(coords_all_soil,paste0("coords_all_soil.txt"),sep="\t",row.names=F,col.names=F,quote=F)
# 
# set.seed(619)
# coords_all_root <- layout_(add_net_root,with_fr(niter=9999, grid="nogrid"))
# write.table(coords_all_root,paste0("coords_all_root.txt"),sep="\t",row.names=F,col.names=F,quote=F)
# 
# set.seed(619)
# coords_all_film <- layout_(add_net_film,with_fr(niter=9999, grid="nogrid"))
# write.table(coords_all_film,paste0("coords_all_film.txt"),sep="\t",row.names=F,col.names=F,quote=F)

## Import pre-calculated FR layout coordinates to save time 
coords_all_soil <- as.matrix(read.table("coords_all_soil.txt"))
dimnames(coords_all_soil) <-  NULL

coords_all_root <- as.matrix(read.table("coords_all_root.txt"))
dimnames(coords_all_root) <-  NULL

coords_all_film <- as.matrix(read.table("coords_all_film.txt"))
dimnames(coords_all_film) <-  NULL

## Plot Supplementary Figure S13
# pdf(paste0("network_2.pdf"),height=7,width=7)
par(mfrow=c(1,3),mar=c(0,0,0,0))


plot(add_net_soil, vertex.label=NA, vertex.size=add_net_soil_sizes, layout=coords_all_soil)
plot(add_net_root, vertex.label=NA, vertex.size=add_net_root_sizes, layout=coords_all_root)
plot(add_net_film, vertex.label=NA, vertex.size=add_net_film_sizes, layout=coords_all_film)

dev.off()






## Soil
soil_nofilm <- rownames(design_B)[intersect(which(design_B$film == "NO"),which(design_B$Site == "soil"))]

soil_cp_otu_B_nofilm <- cp_otu_B[,soil_nofilm]
soil_cp_otu_B_nofilm <- soil_cp_otu_B_nofilm[rowSums(soil_cp_otu_B_nofilm) > 0,]
keep_soil_B_nofilm <- which(rowSums(soil_cp_otu_B_nofilm >= 2) >= 4)

soil_cp_otu_B_nofilm <- soil_cp_otu_B_nofilm[keep_soil_B_nofilm,]

nrow(soil_cp_otu_B_nofilm)

soil_tax_B_no <- tax_B[rownames(soil_cp_otu_B_nofilm),]
soil_design_B_no <- droplevels(design_B[soil_nofilm,])



soil_nofilm <- rownames(design_F)[intersect(which(design_F$film == "NO"),which(design_F$Site == "soil"))]

soil_cp_otu_F_nofilm <- cp_otu_F[,soil_nofilm]
soil_cp_otu_F_nofilm <- soil_cp_otu_F_nofilm[rowSums(soil_cp_otu_F_nofilm) > 0,]
keep_film_F_nofilm <- which(rowSums(soil_cp_otu_F_nofilm >= 2) >= 4)

soil_cp_otu_F_nofilm <- soil_cp_otu_F_nofilm[keep_film_F_nofilm,]

nrow(soil_cp_otu_F_nofilm)

soil_tax_F_no <- tax_F[rownames(soil_cp_otu_F_nofilm),]
soil_design_F_no <- droplevels(design_F[soil_nofilm,])



soil_nofilm <- rownames(design_P)[intersect(which(design_P$film == "NO"),which(design_P$Site == "soil"))]

soil_cp_otu_P_nofilm <- cp_otu_P[,soil_nofilm]
soil_cp_otu_P_nofilm <- soil_cp_otu_P_nofilm[rowSums(soil_cp_otu_P_nofilm) > 0,]
keep_film_P_nofilm <- which(rowSums(soil_cp_otu_P_nofilm >= 2) >= 4)

soil_cp_otu_P_nofilm <- soil_cp_otu_P_nofilm[keep_film_P_nofilm,]

nrow(soil_cp_otu_P_nofilm)

soil_tax_P_no <- tax_P[rownames(soil_cp_otu_P_nofilm),]
soil_design_P_no <- droplevels(design_P[soil_nofilm,])

otu_cp_soil_combine <- rbind(soil_cp_otu_B_nofilm, soil_cp_otu_F_nofilm, soil_cp_otu_P_nofilm)

soil_tax_B_no <- soil_tax_B_no[,-c(5:10)]
soil_tax_F_no <- soil_tax_F_no[,-c(5:10)]
soil_tax_P_no <- soil_tax_P_no[,-c(5:10)]

otu_cp_soil_combine_tax <- rbind(soil_tax_B_no, soil_tax_F_no, soil_tax_P_no)


no_otu_cor_soil <- rcorr(t(otu_cp_soil_combine), type=c("spearman"))

## Create data frame of co-occurring OTUs
no_cor_df_soil <- CorrDF(no_otu_cor_soil$r, no_otu_cor_soil$P)
no_cor_df_soil$padj <- p.adjust(no_cor_df_soil$p, method="none")

## Subset data frame for co-occurring OTUs with Spearman's rho > 0.5 and a p-value < 0.001
no_cor_df_padj_soil <- no_cor_df_soil[which(no_cor_df_soil$cor > 0.7| no_cor_df_soil$cor < -0.7),]
no_cor_df_padj_soil <- no_cor_df_padj_soil[which(no_cor_df_padj_soil$padj < 0.001),]

## Make node attribute table
nodeattrib_no_soil <- data.frame(node = union(no_cor_df_padj_soil$from,no_cor_df_padj_soil$to))
nodeattrib_no_soil$Kingdom <- 0

for (i in as.character(nodeattrib_no_soil$node))
{
  if (i %in% rownames(otu_cp_soil_combine_tax) == TRUE)
  {nodeattrib_no_soil[nodeattrib_no_soil$node==i,"Kingdom"] <- paste(otu_cp_soil_combine_tax[i,1:1])}
  else
  { nodeattrib_no_soil[nodeattrib_no_soil$node==i,"Kingdom"]<- "NA"}
}


## Create co-occurrence network with igraph
no_net_soil <- graph_from_data_frame(no_cor_df_padj_soil, direct=F, vertices=nodeattrib_no_soil)

## Calculate relative abudnance of OTU nodes
soil_no_ra <- apply(otu_cp_soil_combine,1,mean)
soil_no_ra <- B_no_ra[V(no_net_soil)$name]

## Network properties ##

## Number of bacteria and fungi nodes
length(grep("bASV*",names(V(no_net_soil))))
length(grep("fASV*",names(V(no_net_soil))))
length(grep("pASV*",names(V(no_net_soil))))


## Number of edges in network
length(E(no_net_soil))

## Connections 
bb_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor>0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor>0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor>0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor>0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor>0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor>0,]
nrow(pf_occur_soil)

bb_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor<0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor<0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor<0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor<0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor<0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(no_cor_df_padj_soil[with(no_cor_df_padj_soil, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor<0,]
nrow(pf_occur_soil)





mean(E(no_net_soil))

graph.density(no_net_soil)

no_net_soil_cfg <- cluster_fast_greedy(as.undirected(no_net_soil))
no_net_soil_modules <- sort(table(membership(no_net_soil_cfg)),decr=T)

transitivity(no_net_soil)

no_net_soil_betweenness <- betweenness(no_net_soil,normalized = T)
no_net_soil_degree <- igraph::degree(no_net_soil)

nodeattrib_no_soil$degree <- no_net_soil_degree



# ec <- edge.betweenness.community(no_net_soil)
# print(modularity(ec))

# write.table(no_net_soil_degree,paste0("no_net_soil_degree.txt"),sep="\t",quote=F)
# no_net_soil_degree <- read.table("no_net_soil_degree.txt", sep="\t", header=T, blank.lines.skip=F, check.names=F,row.names = 1)
# 
# no_net_soil_degree$Phylum <- factor(no_net_soil_degree$Phylum)
# 
# F_no_degree <- ggplot(no_net_soil_degree, aes(x=factor(Phylum,levels = c("Acidobacteria","Actinobacteria","Alphaproteobacteria","Betaproteobacteria","Bacteroidetes","Chloroflexi","Firmicutes","Gemmatimonadetes")), y=attribute,fill =Phylum))+
#   geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
#   theme_bw()+
#   theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none',axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+
#   labs(x="Site", y="Degree of nodes")



no_soil_topological <- cbind(no_net_soil_betweenness,no_net_soil_degree)

no_soil_topological_data <- as.data.frame(no_soil_topological)
no_soil_topological_data$node <- rownames(no_soil_topological_data)
no_soil_topological_data$Kingdom <- 0

a <- str_which(no_soil_topological_data$node,'bASV')
no_soil_topological_data$Kingdom[a ] <- 'Bacteria'

b <- str_which(no_soil_topological_data$node,'fASV')
no_soil_topological_data$Kingdom[b ] <- 'Fungi'

c <- str_which(no_soil_topological_data$node,'pASV')
no_soil_topological_data$Kingdom[c ] <- 'Protist'

Bacteria  <- no_soil_topological_data[no_soil_topological_data$Kingdom=="Bacteria", 1 ]
Fungi  <- no_soil_topological_data[no_soil_topological_data$Kingdom=="Fungi", 1 ]
Protist  <- no_soil_topological_data[no_soil_topological_data$Kingdom=="Protist", 1 ]

no_soil_topological_data <- no_soil_topological_data[order(no_soil_topological_data$no_net_soil_betweenness),]
no_soil_topological_data <- no_soil_topological_data[-c(1:800),]

no_soil_net_plot_betweenness <- ggplot(data = no_soil_topological_data,aes(x=Kingdom,y=no_net_soil_betweenness))+ geom_boxplot(outlier.shape = NA)+   ylim (0, 0.01)+geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

Bacteria  <- no_soil_topological_data[no_soil_topological_data$Kingdom=="Bacteria", 2 ]
Fungi  <- no_soil_topological_data[no_soil_topological_data$Kingdom=="Fungi", 2 ]
Protist  <- no_soil_topological_data[no_soil_topological_data$Kingdom=="Protist", 2 ]

no_soil_net_plot_degree <- ggplot(data = no_soil_topological_data,aes(x=Kingdom,y=no_net_soil_degree))+ geom_boxplot(outlier.shape = NA)+  geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

plot(no_net_soil_betweenness,no_net_soil_degree)

# B_no_topological <- cbind(no_net_soil_betweenness,no_net_soil_degree)
# 
# B_ADD_topological_data <- as.data.frame(B_no_topological)
# B_ADD_topological_data$node <- rownames(B_ADD_topological_data)
# B_ADD_topological_data$Kingdom <- 0
# 
# a <- str_which(B_ADD_topological_data$node,'bASV')
# B_ADD_topological_data$Kingdom[a ] <- 'Bacteria'
# 
# b <- str_which(B_ADD_topological_data$node,'fASV')
# B_ADD_topological_data$Kingdom[b ] <- 'Fungi'
# 
# c <- str_which(B_ADD_topological_data$node,'pASV')
# B_ADD_topological_data$Kingdom[c ] <- 'Protist'
# 
# 
# B_ADD_topological <- ggplot(data = B_ADD_topological_data,aes(x=no_net_soil_betweenness,y=no_net_soil_degree,colour =Kingdom))+geom_point( size = 3)+scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2"))

## Calculate network node degrees/max/min
B_no_deg <- sort(degree(no_net_soil,mode="all"),decr=T)
max(B_no_deg)
mean(B_no_deg)

## Set node colors based upon sensitivity to management system
cs <- c("Bacteria","Fungi","Eukaryota")
unique(V(no_net_soil)$Kingdom)
V(no_net_soil)$color <- V(no_net_soil)$Kingdom
V(no_net_soil)$color[V(no_net_soil)$color == "Bacteria"] <- "dodgerblue"
V(no_net_soil)$color[V(no_net_soil)$color == "Fungi"] <- "firebrick2"
V(no_net_soil)$color[V(no_net_soil)$color == "Eukaryota"] <- "goldenrod2"
V(no_net_soil)$frame.color <- V(no_net_soil)$color

## Set node shape
V(no_net_soil)$shape <- "circle"

## Set node size
V(no_net_soil)$size <- V(no_net_soil)$name
V(no_net_soil)$size <- log(nodeattrib_no_soil$degree)
no_net_soil_sizes <- as.numeric(V(no_net_soil)$size)




## Root
root_nofilm <- rownames(design_B)[intersect(which(design_B$film == "NO"),which(design_B$Site == "root"))]

root_cp_otu_B_nofilm <- cp_otu_B[,root_nofilm]
root_cp_otu_B_nofilm <- root_cp_otu_B_nofilm[rowSums(root_cp_otu_B_nofilm) > 0,]
keep_root_B_nofilm <- which(rowSums(root_cp_otu_B_nofilm >= 2) >= 4)

root_cp_otu_B_nofilm <- root_cp_otu_B_nofilm[keep_root_B_nofilm,]

nrow(root_cp_otu_B_nofilm)

root_tax_B_no <- tax_B[rownames(root_cp_otu_B_nofilm),]
root_design_B_no <- droplevels(design_B[root_nofilm,])



root_nofilm <- rownames(design_F)[intersect(which(design_F$film == "NO"),which(design_F$Site == "root"))]

root_cp_otu_F_nofilm <- cp_otu_F[,root_nofilm]
root_cp_otu_F_nofilm <- root_cp_otu_F_nofilm[rowSums(root_cp_otu_F_nofilm) > 0,]
keep_root_F_nofilm <- which(rowSums(root_cp_otu_F_nofilm >= 2) >= 4)

root_cp_otu_F_nofilm <- root_cp_otu_F_nofilm[keep_root_F_nofilm,]

nrow(root_cp_otu_F_nofilm)

root_tax_F_no <- tax_F[rownames(root_cp_otu_F_nofilm),]
root_design_F_no <- droplevels(design_F[root_nofilm,])



root_nofilm <- rownames(design_P)[intersect(which(design_P$film == "NO"),which(design_P$Site == "root"))]

root_cp_otu_P_nofilm <- cp_otu_P[,root_nofilm]
root_cp_otu_P_nofilm <- root_cp_otu_P_nofilm[rowSums(root_cp_otu_P_nofilm) > 0,]
keep_root_P_nofilm <- which(rowSums(root_cp_otu_P_nofilm >= 2) >= 4)

root_cp_otu_P_nofilm <- root_cp_otu_P_nofilm[keep_root_P_nofilm,]

nrow(root_cp_otu_P_nofilm)

root_tax_P_no <- tax_P[rownames(root_cp_otu_P_nofilm),]
root_design_P_no <- droplevels(design_P[root_nofilm,])

otu_cp_root_combine <- rbind(root_cp_otu_B_nofilm, root_cp_otu_F_nofilm, root_cp_otu_P_nofilm)

root_tax_B_no <- root_tax_B_no[,-c(5:10)]
root_tax_F_no <- root_tax_F_no[,-c(5:10)]
root_tax_P_no <- root_tax_P_no[,-c(5:10)]

otu_cp_root_combine_tax <- rbind(root_tax_B_no, root_tax_F_no, root_tax_P_no)


no_otu_cor_root <- rcorr(t(otu_cp_root_combine), type=c("spearman"))

## Create data frame of co-occurring OTUs
no_cor_df_root <- CorrDF(no_otu_cor_root$r, no_otu_cor_root$P)
no_cor_df_root$padj <- p.adjust(no_cor_df_root$p, method="none")

## Subset data frame for co-occurring OTUs with Spearman's rho > 0.5 and a p-value < 0.001
no_cor_df_padj_root <- no_cor_df_root[which(no_cor_df_root$cor > 0.7| no_cor_df_root$cor < -0.7),]
no_cor_df_padj_root <- no_cor_df_padj_root[which(no_cor_df_padj_root$padj < 0.001),]

## Make node attribute table
nodeattrib_no_root <- data.frame(node = union(no_cor_df_padj_root$from,no_cor_df_padj_root$to))
nodeattrib_no_root$Kingdom <- 0

for (i in as.character(nodeattrib_no_root$node))
{
  if (i %in% rownames(otu_cp_root_combine_tax) == TRUE)
  {nodeattrib_no_root[nodeattrib_no_root$node==i,"Kingdom"] <- paste(otu_cp_root_combine_tax[i,1:1])}
  else
  { nodeattrib_no_root[nodeattrib_no_root$node==i,"Kingdom"]<- "NA"}
}


## Create co-occurrence network with igraph
no_net_root <- graph_from_data_frame(no_cor_df_padj_root, direct=F, vertices=nodeattrib_no_root)

## Calculate relative abudnance of OTU nodes
root_no_ra <- apply(otu_cp_root_combine,1,mean)
root_no_ra <- B_no_ra[V(no_net_root)$name]

## Network properties ##

## Number of bacteria and fungi nodes
length(grep("bASV*",names(V(no_net_root))))
length(grep("fASV*",names(V(no_net_root))))
length(grep("pASV*",names(V(no_net_root))))


## Number of edges in network
length(E(no_net_root))

## Connections 
bb_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor>0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor>0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor>0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor>0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor>0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor>0,]
nrow(pf_occur_soil)

bb_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("bASV*",from) & grepl("bASV*",to)),])
bb_occur_soil <- bb_occur_soil[bb_occur_soil$cor<0,]
nrow(bb_occur_soil)

ff_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("fASV*",from) & grepl("fASV*",to)),])
ff_occur_soil <- ff_occur_soil[ff_occur_soil$cor<0,]
nrow(ff_occur_soil)

pp_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("pASV*",from) & grepl("pASV*",to)),])
pp_occur_soil <- pp_occur_soil[pp_occur_soil$cor<0,]
nrow(pp_occur_soil)

bf_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("fASV*",from) & grepl("bASV*",to)),])
bf_occur_soil <- bf_occur_soil[bf_occur_soil$cor<0,]
nrow(bf_occur_soil)

bp_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("pASV*",from) & grepl("bASV*",to)),])
bp_occur_soil <- bp_occur_soil[bp_occur_soil$cor<0,]
nrow(bp_occur_soil)

pf_occur_soil <- droplevels(no_cor_df_padj_root[with(no_cor_df_padj_root, grepl("pASV*",from) & grepl("fASV*",to)),])
pf_occur_soil <- pf_occur_soil[pf_occur_soil$cor<0,]
nrow(pf_occur_soil)



mean(E(no_net_root))

graph.density(no_net_root)

no_net_root_cfg <- cluster_fast_greedy(as.undirected(no_net_root))
no_net_root_modules <- sort(table(membership(no_net_root_cfg)),decr=T)

transitivity(no_net_root)

no_net_root_betweenness <- betweenness(no_net_root,normalized = T)
no_net_root_degree <- igraph::degree(no_net_root)

nodeattrib_no_root$degree <- no_net_root_degree

# ec <- edge.betweenness.community(no_net_root)
# print(modularity(ec))

# write.table(no_net_root_degree,paste0("no_net_root_degree.txt"),sep="\t",quote=F)
# no_net_root_degree <- read.table("no_net_root_degree.txt", sep="\t", header=T, blank.lines.skip=F, check.names=F,row.names = 1)
# 
# no_net_root_degree$Phylum <- factor(no_net_root_degree$Phylum)
# 
# F_no_degree <- ggplot(no_net_root_degree, aes(x=factor(Phylum,levels = c("Acidobacteria","Actinobacteria","Alphaproteobacteria","Betaproteobacteria","Bacteroidetes","Chloroflexi","Firmicutes","Gemmatimonadetes")), y=attribute,fill =Phylum))+
#   geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
#   theme_bw()+
#   theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),legend.position = 'none',axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank(),axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())+
#   labs(x="Site", y="Degree of nodes")


no_root_topological <- cbind(no_net_root_betweenness,no_net_root_degree)

no_root_topological_data <- as.data.frame(no_root_topological)
no_root_topological_data$node <- rownames(no_root_topological_data)
no_root_topological_data$Kingdom <- 0

a <- str_which(no_root_topological_data$node,'bASV')
no_root_topological_data$Kingdom[a ] <- 'Bacteria'

b <- str_which(no_root_topological_data$node,'fASV')
no_root_topological_data$Kingdom[b ] <- 'Fungi'

c <- str_which(no_root_topological_data$node,'pASV')
no_root_topological_data$Kingdom[c ] <- 'Protist'

no_root_topological_data <- no_root_topological_data[order(no_root_topological_data$no_net_root_betweenness),]
no_root_topological_data <- no_root_topological_data[-c(1:800),]

Bacteria  <- no_root_topological_data[no_root_topological_data$Kingdom=="Bacteria", 1 ]
Fungi  <- no_root_topological_data[no_root_topological_data$Kingdom=="Fungi", 1 ]
Protist  <- no_root_topological_data[no_root_topological_data$Kingdom=="Protist", 1 ]

no_root_net_plot_betweenness <- ggplot(data = no_root_topological_data,aes(x=Kingdom,y=no_net_root_betweenness))+geom_boxplot(outlier.shape = NA)+ ylim (0, 0.04)+ geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

Bacteria  <- no_root_topological_data[no_root_topological_data$Kingdom=="Bacteria", 2 ]
Fungi  <- no_root_topological_data[no_root_topological_data$Kingdom=="Fungi", 2 ]
Protist  <- no_root_topological_data[no_root_topological_data$Kingdom=="Protist", 2 ]

no_root_net_plot_degree <- ggplot(data = no_root_topological_data,aes(x=Kingdom,y=no_net_root_degree))+  geom_boxplot(outlier.shape = NA)+  geom_jitter(aes(fill=Kingdom),width =0.2,shape = 21,size=2.5)+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

grid.newpage()
grid.arrange(no_soil_net_plot_degree,all_soil_net_plot_degree,all_film_net_plot_degree,no_root_net_plot_degree, all_root_net_plot_degree ,no_soil_net_plot_betweenness  ,all_soil_net_plot_betweenness, all_film_net_plot_betweenness ,no_root_net_plot_betweenness,all_root_net_plot_betweenness  ,ncol = 5)


plot(no_net_root_betweenness,no_net_root_degree)
# 
# B_no_topological <- cbind(no_net_root_betweenness,no_net_root_degree)
# B_ADD_topological_data <- as.data.frame(B_no_topological)
# B_ADD_topological_data$node <- rownames(B_ADD_topological_data)
# B_ADD_topological_data$Kingdom <- 0
# 
# a <- str_which(B_ADD_topological_data$node,'bASV')
# B_ADD_topological_data$Kingdom[a ] <- 'Bacteria'
# 
# b <- str_which(B_ADD_topological_data$node,'fASV')
# B_ADD_topological_data$Kingdom[b ] <- 'Fungi'
# 
# c <- str_which(B_ADD_topological_data$node,'pASV')
# B_ADD_topological_data$Kingdom[c ] <- 'Protist'
# 
# 
# B_ADD_topological <- ggplot(data = B_ADD_topological_data,aes(x=no_net_root_betweenness,y=no_net_root_degree,colour =Kingdom))+geom_point( size = 3)+scale_fill_manual(values = c("#d2a128","#41ab6d","#297ec2"))


## Calculate network node degrees/max/min
B_no_deg <- sort(degree(no_net_root,mode="all"),decr=T)
max(B_no_deg)
mean(B_no_deg)

## Set node colors based upon sensitivity to management system
cs <- c("Bacteria","Fungi","Eukaryota")
unique(V(no_net_root)$Kingdom)
V(no_net_root)$color <- V(no_net_root)$Kingdom
V(no_net_root)$color[V(no_net_root)$color == "Bacteria"] <- "dodgerblue"
V(no_net_root)$color[V(no_net_root)$color == "Fungi"] <- "firebrick2"
V(no_net_root)$color[V(no_net_root)$color == "Eukaryota"] <- "goldenrod2"
V(no_net_root)$frame.color <- V(no_net_root)$color

## Set node shape
V(no_net_root)$shape <- "circle"

## Set node size
V(no_net_root)$size <- V(no_net_root)$name
V(no_net_root)$size <- log(nodeattrib_no_root$degree)
no_net_root_sizes <- as.numeric(V(no_net_root)$size)



#####  Figure S13 : Individual Co-occurence networks #####

## Note:the permutations of the network layouts is very time consuming and processor intensive
## Set layouts of the networks with Fruchterman & Reingold algorithim
# 
set.seed(619)
coords_all_soil_no <- layout_(no_net_soil,with_fr(niter=9999, grid="nogrid"))
write.table(coords_all_soil_no,paste0("coords_all_soil_no.txt"),sep="\t",row.names=F,col.names=F,quote=F)
set.seed(619)
coords_all_root_no <- layout_(no_net_root,with_fr(niter=9999, grid="nogrid"))
write.table(coords_all_root_no,paste0("coords_all_root_no.txt"),sep="\t",row.names=F,col.names=F,quote=F)


## Import pre-calculated FR layout coordinates to save time 
coords_all_soil_no <- as.matrix(read.table("coords_all_soil_no.txt"))
dimnames(coords_all_soil_no) <-  NULL

coords_all_root_no <- as.matrix(read.table("coords_all_root_no.txt"))
dimnames(coords_all_root_no) <-  NULL


## Plot Supplementary Figure S13
# pdf(paste0("network_2.pdf"),height=7,width=7)
par(mfrow=c(1,2),mar=c(0,0,0,0))

cols <- c("darkseagreen4" ,"darkseagreen2","darkseagreen3")

plot(no_net_soil, vertex.label=NA, vertex.size=no_net_soil_sizes, layout=coords_all_soil_no)
plot(no_net_root, vertex.label=NA, vertex.size=no_net_root_sizes, layout=coords_all_root_no)

dev.off()



## Network proporties
network_properties <- read.table("relationship.txt", header = T,row.names=1,sep="\t",  blank.lines.skip=F, check.names=F)

par(mfrow=c(1,6),mar=c(3,3,3,3))
barplot_otu <- barplot(network_properties$B_nodes, names.arg=rownames(network_properties), 
                       las=2, ylab="cumulative relative abundance", cex.lab=1, cex.axis=.7, cex.names=.7,
                       main="Bacteria", border=F)

barplot_Connections <- barplot(network_properties$F_nodes, names.arg=rownames(network_properties),
                               las=2, ylab="cumulative relative abundance", cex.lab=1, cex.axis=.7, cex.names=.7,
                               main="Fungi", border=F)

barplot_Connections <- barplot(network_properties$P_nodes,names.arg=rownames(network_properties),
                               las=2, ylab="cumulative relative abundance", cex.lab=1, cex.axis=.7, cex.names=.7,
                               main="Fungi", border=F)

barplot_Avg <- barplot(network_properties$`Avg. connectivity`, names.arg=rownames(network_properties),
                       las=2, ylab="cumulative relative abundance", cex.lab=1, cex.axis=.7, cex.names=.7,
                       main="Avg. connectivity", border=F)

barplot_Modules <- barplot(network_properties$Modules, names.arg=rownames(network_properties),
                           las=2, ylab="cumulative relative abundance", cex.lab=1, cex.axis=.7, cex.names=.7,
                           main="Modules", border=F)

barplot_Clustering <- barplot(network_properties$`Clustering coefficient`, names.arg=rownames(network_properties),las=2, ylab="cumulative relative abundance", cex.lab=1, cex.axis=.7, cex.names=.7,
                              main="Clustering coefficient",border=F)


network_properties <- read.table("relationship.txt", header = T,row.names=1,sep="\t",  blank.lines.skip=F, check.names=F)

network_properties <- t(network_properties) * 100

network_properties <- t(t(network_properties)/colSums(network_properties)) * 100

network_properties <- melt(network_properties)

network_properties$Var2 <- factor(network_properties$Var2,c("Soil","ADD_Soil","ADD_Film","Root","ADD_Root"))
ggplot(data=network_properties, aes(x=Var2, y=value, group=Var1, colour =Var1))+ geom_line(size=1.2) + geom_point(color="black", size=3) + scale_color_manual(values = c('steelblue','darkred',"orange",'purple','green',"yellow")) + scale_fill_manual(values = c('steelblue','darkred',"orange",'purple','green',"yellow")) 


nodes <- ggplot(network_properties, aes(x=Kingdom,y=nodes,fill=factor(Treatment,levels = c("NO","Add")))) + geom_col(position = 'dodge')+scale_y_break(c(736,3000),space = 0.3,scales = 1.5)+scale_y_break(c(3500,6800),space = 0.3,scales = 1.5)+ theme(legend.position = 'none')

P_edges <- ggplot(network_properties, aes(x=Kingdom,y=P_edges,fill=factor(Treatment,levels = c("NO","Add")))) + geom_col(position = 'dodge')+scale_y_break(c(26300,690000),space = 0.3,scales = 1.5)+scale_y_break(c(13000,14000),space = 0.3,scales = 1.5)+ theme(legend.position = 'none')

N_edges <- ggplot(network_properties, aes(x=Kingdom,y=N_edges,fill=Treatment)) + geom_col(position = 'dodge')+ theme(legend.position = 'none')+scale_y_break(c(736,3000),space = 0.3,scales = 1.5)+scale_y_break(c(8000,170000),space = 0.3,scales = 1.5)

Density <- ggplot(network_properties, aes(x=Kingdom,y=Density,fill=Treatment)) + geom_col(position = 'dodge')+ theme(legend.position = 'none')

Avg <- ggplot(network_properties, aes(x=Kingdom,y=Avg,fill=Treatment)) + geom_col(position = 'dodge')+ theme(legend.position = 'none')+scale_y_break(c(17000,435000),space = 0.3,scales = 1.5)

Clustering <- ggplot(network_properties, aes(x=Kingdom,y=Clustering,fill=Treatment)) + geom_col(position = 'dodge')+ theme(legend.position = 'none')


grid.newpage()
grid.arrange(nodes,P_edges,N_edges,Density,Avg,Clustering,ncol = 6)





##### neutral model #####
library(Hmisc)
library(minpack.lm)
library(stats4)
library(spaa)


## soil_cp_otu_B_addfilm 
spp<-t(soil_cp_otu_B_addfilm)

soil_PE_B_niche_width <- niche.width(soil_cp_otu_B_addfilm, method = 'levins')
soil_PE_B_niche_width

N <- mean(apply(spp, 1, sum))
p.m <- apply(spp, 2, mean)
p.m <- p.m[p.m != 0]
p <- p.m/N
spp.bi <- 1*(spp>0)
freq <- apply(spp.bi, 2, mean)
freq <- freq[freq != 0]
C <- merge(p, freq, by=0)
C <- C[order(C[,2]),]
C <- as.data.frame(C)
C.0 <- C[!(apply(C, 1, function(y) any(y == 0))),]
p <- C.0[,2]
freq <- C.0[,3]
names(p) <- C.0[,1]
names(freq) <- C.0[,1]
d = 1/N
m.fit <- nlsLM(freq ~ pbeta(d, N*m*p, N*m*(1 -p), lower.tail=FALSE),start=list(m=0.1))
m.fit  #获取 m 值
m.ci <- confint(m.fit, 'm', level=0.95)
freq.pred <- pbeta(d, N*coef(m.fit)*p, N*coef(m.fit)*(1 -p), lower.tail=FALSE)
pred.ci <- binconf(freq.pred*nrow(spp), nrow(spp), alpha=0.05, method="wilson", return.df=TRUE)
Rsqr <- 1 - (sum((freq - freq.pred)^2))/(sum((freq - mean(freq))^2))
Rsqr  #获取模型的 R2

#输出 3 个统计结果数据表，包括各物种或分类群的平均相对丰度（p.csv）、出现频率（freq.csv）和预测的出现频率（freq.pred.csv）
# write.csv(p, file = "p.csv")
# write.csv(freq, file = "freq.csv")
# write.csv(freq.pred, file = "freq.pred.csv")

#p 是平均相对丰度（mean relative abundance）
#freq 是出现频率（occurrence frequency）的观测值
#freq.pred 是出现频率（occurrence frequency）的预测值，即中性模型的拟合值

#绘制统计图
bacnlsALL <-data.frame(p,freq,freq.pred,pred.ci[,2:3])
inter.col<-rep('black',nrow(bacnlsALL))
inter.col[bacnlsALL$freq <= bacnlsALL$Lower]<-'#A52A2A'#出现频率低于中性群落模型预测的部分
inter.col[bacnlsALL$freq >= bacnlsALL$Upper]<-'#29A6A6'#出现频率高于中性群落模型预测的部分

soil_cp_otu_B_addfilm <- as.data.frame(soil_cp_otu_B_addfilm)
soil_tax_B_add$site <- inter.col

soil_cp_otu_B_addfilm <- cbind(soil_cp_otu_B_addfilm,rowSums(soil_cp_otu_B_addfilm))
soil_cp_otu_B_addfilm$color <- soil_tax_B_add$site
soil_cp_otu_B_addfilm$Phylum <- soil_tax_B_add$labels
soil_cp_otu_B_addfilm <- soil_cp_otu_B_addfilm[,-c(1:6)]
colnames(soil_cp_otu_B_addfilm) <- c("count","color","Phylum")


Gammaproteobacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Gammaproteobacteria",])
Alphaproteobacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Alphaproteobacteria",])
Actinobacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Actinobacteria",])
Acidobacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Acidobacteria",])
Betaproteobacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Betaproteobacteria",])
Chloroflexi <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Chloroflexi",])
Bacteroidetes <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Bacteroidetes",])
Gemmatimonadetes <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Gemmatimonadetes",])
Deltaproteobacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Deltaproteobacteria",])
Saccharibacteria <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Saccharibacteria",])
Firmicutes <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Firmicutes",])
Nitrospirae <- rownames(soil_tax_B_add[soil_tax_B_add$labels=="Nitrospirae",])


soil_cp_otu_B_addfilm <- soil_cp_otu_B_addfilm[unique(c(Gammaproteobacteria,Alphaproteobacteria,Actinobacteria,Acidobacteria,Betaproteobacteria,Chloroflexi,Bacteroidetes,Gemmatimonadetes,Deltaproteobacteria,Saccharibacteria,Firmicutes,Nitrospirae)),]

soil_cp_otu_B_addfilm <- cbind(rownames(soil_cp_otu_B_addfilm), data.frame(soil_cp_otu_B_addfilm, row.names=NULL))
colnames(soil_cp_otu_B_addfilm) <- c("ID","count","color","Phylum")

soil_cp_otu_B_addfilm_wide <- dcast(soil_cp_otu_B_addfilm,Phylum~ ID,value.var  ="count")



## Soil bacteria: Calculate percentage of sequences classified into each phylum
soil_cp_otu_B_addfilm <- as.data.frame(t(soil_cp_otu_B_addfilm_wide))
colnames(soil_cp_otu_B_addfilm) <- soil_cp_otu_B_addfilm[1,]
soil_cp_otu_B_addfilm <- soil_cp_otu_B_addfilm[-1,]

soil_cp_otu_B_addfilm[is.na(soil_cp_otu_B_addfilm)] <- 0
soil_cp_otu_B_addfilm <- as.data.frame(lapply(soil_cp_otu_B_addfilm,as.numeric))

soil_cp_otu_B_addfilm_RA <- t(t(soil_cp_otu_B_addfilm)/colSums(soil_cp_otu_B_addfilm)) * 100
colSums(soil_cp_otu_B_addfilm_RA)
nrow(soil_cp_otu_B_addfilm_RA)

soil_cp_otu_B_addfilm_wide <- soil_cp_otu_B_addfilm_wide[,-1]
rownames(soil_cp_otu_B_addfilm_RA) <- colnames(soil_cp_otu_B_addfilm_wide)

soil_tax_B_add_RA <- soil_tax_B_add[rownames(soil_cp_otu_B_addfilm_RA),]

## Get names of bacteria phyla present (use 'labels' as this specifies class within Proteobacteria)
color_B_soil <- names(sort(table(soil_tax_B_add_RA[,"site"]), decr=T))
length(color_B_soil)
sort(table(soil_tax_B_add_RA[,"site"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(soil_cp_otu_B_addfilm_RA)
for (i in color_B_soil){
  x <- array(colSums(soil_cp_otu_B_addfilm_RA[rownames(soil_tax_B_add_RA)[which(soil_tax_B_add_RA$site == paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}


## Create matrix
rownames(y) <- paste(color_B_soil)
colnames(y) <- paste(colnames(soil_cp_otu_B_addfilm_RA))
B_soil_neutral <- y
B_soil_neutral[,1:5]
colSums(B_soil_neutral)
PHYLUM_mat_B_soil_neutral <- sort(apply(B_soil_neutral,1,mean),decr=T)
B_soil_neutral <- B_soil_neutral[names(PHYLUM_mat_B_soil_neutral),]

new_cols<-c("#29A6A6","black","#A52A2A")
B_soil_neutral <- B_soil_neutral[ c(new_cols),]


##### Plot Supplementary Figure S3
par(oma=c(0,0,0,0), mar=c(6,4,1,5), xpd=NA)
phylum_bar_B <- barplot(as.matrix(B_soil_neutral), col=c('#29A6A6','black','#A52A2A'),
                        ylim=c(0,100), xaxt="n", border=NA, las=2)
axis(1, at=phylum_bar_F, labels=colnames(B_soil_neutral), col.axis="black", las=2, cex.axis=0.9,srt=45)
title(ylab="Percent bOTUs")


library(grid)
grid.newpage()
pushViewport(viewport(h=0.6,w=0.6))
pushViewport(dataViewport(xData=range(log10(bacnlsALL$p)), yData=c(0,1.02),extension=c(0.02,0)))
grid.rect()
grid.points(log10(bacnlsALL$p), bacnlsALL$freq,pch=20,gp=gpar(col=inter.col,cex=0.7))
grid.yaxis()
grid.xaxis()
grid.lines(log10(bacnlsALL$p),bacnlsALL$freq.pred,gp=gpar(col='blue',lwd=2),default='native')

grid.lines(log10(bacnlsALL$p),bacnlsALL$Lower ,gp=gpar(col='blue',lwd=2,lty=2),default='native') 
grid.lines(log10(bacnlsALL$p),bacnlsALL$Upper,gp=gpar(col='blue',lwd=2,lty=2),default='native')  
grid.text(y=unit(0,'npc')-unit(2.5,'lines'),label='Mean Relative Abundance (log10)', gp=gpar(fontface=2)) 
grid.text(x=unit(0,'npc')-unit(3,'lines'),label='Frequency of Occurance',gp=gpar(fontface=2),rot=90) 
#grid.text(x=unit(0,'npc')-unit(-1,'lines'), y=unit(0,'npc')-unit(-15,'lines'),label='Mean Relative Abundance (log)', gp=gpar(fontface=2)) 
#grid.text(round(coef(m.fit)*N),x=unit(0,'npc')-unit(-5,'lines'), y=unit(0,'npc')-unit(-15,'lines'),gp=gpar(fontface=2)) 
#grid.text(label = "Nm=",x=unit(0,'npc')-unit(-3,'lines'), y=unit(0,'npc')-unit(-15,'lines'),gp=gpar(fontface=2))
#grid.text(round(Rsqr,2),x=unit(0,'npc')-unit(-5,'lines'), y=unit(0,'npc')-unit(-16,'lines'),gp=gpar(fontface=2))
#grid.text(label = "Rsqr=",x=unit(0,'npc')-unit(-3,'lines'), y=unit(0,'npc')-unit(-16,'lines'),gp=gpar(fontface=2))
draw.text <- function(just, i, j) {
  grid.text(paste("Rsqr=",round(Rsqr,3),"\n","Nm=",round(coef(m.fit)*N)), x=x[j], y=y[i], just=just)
  #grid.text(deparse(substitute(just)), x=x[j], y=y[i] + unit(2, "lines"),
  #          gp=gpar(col="grey", fontsize=8))
}
x <- unit(1:4/5, "npc")
y <- unit(1:4/5, "npc")
draw.text(c("centre", "bottom"), 4, 1)






##### Antibiotic #####
Antibiotic_ab <- read.table("Relative_ARG.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
Antibiotic_tax <- read.table("Tax_Relative_ARG.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)

design_Antibiotic <- design_B[colnames(Antibiotic_ab),]
root_0<- rownames(design_Antibiotic[design_Antibiotic$Treatment1=="root_0",])
root_600<- rownames(design_Antibiotic[design_Antibiotic$Treatment1=="root_600",])
soil_0<- rownames(design_Antibiotic[design_Antibiotic$Treatment1=="soil_0",])
soil_600<- rownames(design_Antibiotic[design_Antibiotic$Treatment1=="soil_600",])
film_600 <- rownames(design_Antibiotic[design_Antibiotic$Treatment1=="film_600",])


Antibiotic_tax$labels <- Antibiotic_tax$Class
Antibiotic_tax$cols <- Antibiotic_tax$labels
table(Antibiotic_tax$labels)

Antibiotic_tax_arg <- Antibiotic_tax[which(Antibiotic_tax$type == "ARG"),]
Antibiotic_ab_arg <- Antibiotic_ab[rownames(Antibiotic_tax_arg),]
Antibiotic_ab_arg <- Antibiotic_ab_arg[rowSums(Antibiotic_ab_arg) > 0,]
Antibiotic_tax_arg <- Antibiotic_tax_arg[rownames(Antibiotic_ab_arg),]
dim(Antibiotic_ab_arg)

Antibiotic_tax_mge <- Antibiotic_tax[which(Antibiotic_tax$type == "MGE"),]
Antibiotic_ab_mge <- Antibiotic_ab[rownames(Antibiotic_tax_mge),]
Antibiotic_ab_mge <- Antibiotic_ab_mge[rowSums(Antibiotic_ab_mge) > 0,]
dim(Antibiotic_ab_mge)

Antibiotic_ab_mge <- melt(Antibiotic_ab_mge)
Antibiotic_ab_mge <- aggregate(Antibiotic_ab_mge$value, by=list(type=Antibiotic_ab_mge$variable),sum)


physeq_arg_norm <- phyloseq(otu_table(Antibiotic_ab, taxa_are_rows=T),
                            tax_table(as.matrix(Antibiotic_tax)),
                            sample_data(design_Antibiotic))

pcoa_norm_arg <- ordinate(physeq_arg_norm,"PCoA","bray")
pcoa_all_arg <- plot_ordination(physeq_arg_norm, pcoa_norm_arg, type="sites", color="Site", shape="con")
pcoa_all_arg <- pcoa_all_arg+
  geom_point(size=8)+
  xlab(paste("PCo 1", paste("(",round(pcoa_all_arg$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_all_arg$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("ARGs Community")



## Create bray-curtis dissimiliartiy matrix
all_dis_ARG <- vegdist(t(otu_table(physeq_arg_norm)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects
paov_all_ARG <- adonis2(all_dis_ARG ~Site+con*Treatment1, data=design_Antibiotic, permutations=9999)

##### Supplementary Table S2
paov_all_ARG



#####barplot ARGs#####
PHYLAnames_B <- names(sort(table(Antibiotic_tax_arg[,"labels"]), decr=T))
length(PHYLAnames_B)
sort(table(Antibiotic_tax_arg[,"labels"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(Antibiotic_ab_arg)
for (i in PHYLAnames_B){
  x <- array(colSums(Antibiotic_ab_arg[rownames(Antibiotic_tax_arg)[which(Antibiotic_tax_arg$labels == paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}


## Create matrix
rownames(y) <- paste(PHYLAnames_B)
colnames(y) <- paste(colnames(Antibiotic_ab_arg))
PHYLUM_mat_B <- y
PHYLUM_mat_B[,1:5]
colSums(PHYLUM_mat_B)
PHYLUM_mat_B_mean <- sort(apply(PHYLUM_mat_B,1,mean),decr=T)
PHYLUM_mat_B <- PHYLUM_mat_B[names(PHYLUM_mat_B_mean),]

PHYLUM_mat_arg_B <- PHYLUM_mat_B

PHYLUM_mat_B <- as.data.frame(t(PHYLUM_mat_B))
PHYLUM_mat_B$mge <- Antibiotic_ab_mge$x
PHYLUM_mat_B <- as.data.frame(t(PHYLUM_mat_B))


PHYLUM_mat_B_mean_type <-as.matrix(cbind(`root_0`=apply(PHYLUM_mat_B[,root_0],1,mean),
                                         `root_600`=apply(PHYLUM_mat_B[,root_600],1,mean),
                                         `soil_0`=apply(PHYLUM_mat_B[,soil_0],1,mean),
                                         `soil_600`=apply(PHYLUM_mat_B[,soil_600],1,mean),
                                         `film_600`=apply(PHYLUM_mat_B[,film_600],1,mean)))


# Phyla with MEAN abundances higher than 1% relative abundances
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Aminoglycoside antibiotic" ], ]$cols <- "peachpuff3"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Beta-lactamase" ], ]$cols <- "orchid3"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Diaminopyrimidine antibiotic" ], ]$cols <- "gold1"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Fluoroquinolone antibiotic" ], ]$cols <- "lightsalmon4"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Other" ], ]$cols <- "tan1"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Glycopeptide antibiotic" ], ]$cols <- "palegreen4"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="MLSB" ], ]$cols <- "palegreen2"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Multidrug" ], ]$cols <- "steelblue1"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Phenicol antibiotic" ], ]$cols <- "palegreen3"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Sulfonamide antibiotic" ], ]$cols <- "palegreen1"
Antibiotic_tax_arg[ rownames(Antibiotic_tax_arg)[Antibiotic_tax_arg$labels=="Tetracycline antibiotic" ], ]$cols <- "indianred2"



## collaps OTU colors to prepare Phylum level colors
label_cols_B <- Antibiotic_tax_arg[, c("labels", "cols") ]
library(plyr)
PHYLA_label_cols_B <- ddply(label_cols_B, .variables="cols", .fun=unique)
rownames(PHYLA_label_cols_B) <- PHYLA_label_cols_B[,1]
PHYLA_label_cols_B

## Legend for Phylum colors
PHYLA_label_cols_B_legend <- PHYLA_label_cols_B[1:11,]


##### Plot Supplementary Figure S3
par(oma=c(0,0,0,0), mar=c(10,4,5,5), xpd=NA)
phylum_bar_B <- barplot(as.matrix(PHYLUM_mat_B_mean_type[1:11,]), col=PHYLA_label_cols_B[rownames(PHYLUM_mat_B_mean_type),]$cols, xaxt="n", border=NA, las=2)
axis(1, at=phylum_bar_B, labels=colnames(PHYLUM_mat_B_mean_type), col.axis="black", las=2, cex.axis=0.6)
title(main="Args")

par(xpd = TRUE)
par(new = T)
plot(x = phylum_bar_B,y = PHYLUM_mat_B_mean_type[12,],
     type = "p",col = "black",axes = F, xlab = "",ylab = "",pch = 19,bg = "black",cex = 2)

legend("topright", bty="n", cex=0.7, x.intersp= 0.1, y.intersp=1,
       legend=rev(PHYLA_label_cols_B_legend$labels), 
       fill=rev(PHYLA_label_cols_B_legend$cols), 
       border=rev(PHYLA_label_cols_B_legend$cols) )




##### Procrustes Analysis #####
## B_ARGS
anti_B_ARGS <- cp_otu_B[,rownames(design_Antibiotic)]

spp<-t(anti_B_ARGS)

N <- mean(apply(spp, 1, sum))
p.m <- apply(spp, 2, mean)
p.m <- p.m[p.m != 0]
p <- p.m/N
spp.bi <- 1*(spp>0)
freq <- apply(spp.bi, 2, mean)
freq <- freq[freq != 0]
C <- merge(p, freq, by=0)
C <- C[order(C[,2]),]
C <- as.data.frame(C)
C.0 <- C[!(apply(C, 1, function(y) any(y == 0))),]
p <- C.0[,2]
freq <- C.0[,3]
names(p) <- C.0[,1]
names(freq) <- C.0[,1]
d = 1/N
m.fit <- nlsLM(freq ~ pbeta(d, N*m*p, N*m*(1 -p), lower.tail=FALSE),start=list(m=0.1))
m.fit  
m.ci <- confint(m.fit, 'm', level=0.95)
freq.pred <- pbeta(d, N*coef(m.fit)*p, N*coef(m.fit)*(1 -p), lower.tail=FALSE)
pred.ci <- binconf(freq.pred*nrow(spp), nrow(spp), alpha=0.05, method="wilson", return.df=TRUE)
Rsqr <- 1 - (sum((freq - freq.pred)^2))/(sum((freq - mean(freq))^2))
Rsqr  

bacnlsALL <-data.frame(p,freq,freq.pred,pred.ci[,2:3])
inter.col<-rep('black',nrow(bacnlsALL))
inter.col[bacnlsALL$freq <= bacnlsALL$Lower]<-'#A52A2A'#出现频率低于中性群落模型预测的部分
inter.col[bacnlsALL$freq >= bacnlsALL$Upper]<-'#29A6A6'#出现频率高于中性群落模型预测的部分
bacnlsALL$color <- inter.col

## B_suiji 
design_Anti_B <- design_B[rownames(design_Antibiotic),]
anti_B_in <- cp_otu_B[rownames(bacnlsALL)[which(bacnlsALL$color == "black")],rownames(design_Anti_B)]

anti_B_in <- as.data.frame(t(anti_B_in))
Antibiotic_ab <- as.data.frame(t(Antibiotic_ab_arg))

anti_B_in.dist <- vegdist(anti_B_in)
anti.dist <- vegdist(Antibiotic_ab)

mds.anti_B_SJ <- cmdscale(anti_B_in.dist)
mds.anti <- cmdscale(anti.dist)

# env_pca <- rda(Antibiotic_ab, scale = TRUE)
# mds.anti <- summary(env_pca, scaling = 1)$site
# 
# in_pca <- rda(anti_B_in, scale = TRUE)
# mds.anti_B_SJ <- summary(in_pca, scaling = 1)$site

pro.anti_B.anti <- procrustes(mds.anti_B_SJ,mds.anti, symmetric = TRUE)
summary(pro.anti_B.anti)

plot(pro.anti_B.anti, kind = 2)
residuals(pro.anti_B.anti)

set.seed(619)
pro.anti_B_t <- protest(mds.anti_B_SJ,mds.anti, permutations = 999)
pro.anti_B_t

pro.anti_B_t$ss
pro.anti_B_t$signif

Pro_Y <- cbind(data.frame(pro.anti_B.anti$Yrot), data.frame(pro.anti_B.anti$X))
Pro_X <- data.frame(pro.anti_B.anti$rotation)

ggplot(data=Pro_Y) +geom_segment(aes(x = X1, y = X2,xend = (X1 + Dim1)/2, yend = (X2 + Dim2)/2), 
                                 arrow = arrow(length = unit(0, 'cm')),color = "#9BBB59", size = 1) +
  geom_segment(aes(x = (X1 + Dim1)/2, y = (X2 + Dim2)/2,
                   xend = Dim1, yend = Dim2),
               arrow = arrow(length = unit(0.2, 'cm')),
               color = "#957DB1", size = 1) +
  geom_point(aes(X1, X2), color = "#9BBB59", size = 3, shape = 16) +
  geom_point(aes(Dim1, Dim2), color = "#957DB1", size = 3, shape = 16) +
  theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black',fill = 'transparent'),
        legend.key = element_rect(fill = 'transparent'),
        axis.ticks.length = unit(0.4,"lines"),axis.ticks = element_line(color='black'),
        axis.line = element_line(colour = "black"),
        axis.title.x=element_text(colour='black', size=14),
        axis.title.y=element_text(colour='black', size=14),
        axis.text=element_text(colour='black',size=12)) +
  labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
  labs(title="Correlation between community and environment") +
  annotate('text', label = 'Procrustes analysis:\n
                    M2 = 0.431, p-value = 0.001',
           x = -0.3, y = 0.3, size = 4,hjust = 0) +
  theme(plot.title = element_text(size=14,colour = "black",
                                  hjust = 0.5,face = "bold"))


## B_QUEDING
anti_B_out <- cp_otu_B[rownames(bacnlsALL)[which(bacnlsALL$color == "#29A6A6"|bacnlsALL$color == "#A52A2A")],rownames(design_Anti_B)]

anti_B_out <- as.data.frame(t(anti_B_out))
Antibiotic_ab_arg <- as.data.frame(t(Antibiotic_ab_arg))

anti_B_out.dist <- vegdist(anti_B_out)
anti.dist <- vegdist(Antibiotic_ab_arg)

mds.anti_B_QD <- cmdscale(anti_B_out.dist)
mds.anti <- cmdscale(anti.dist)

# env_pca <- rda(Antibiotic_ab, scale = TRUE)
# mds.anti <- summary(env_pca, scaling = 1)$site

# otu_pca <- rda(anti_B_out, scale = TRUE)
# mds.anti_B_QD <- summary(otu_pca, scaling = 1)$site

pro.anti_B.anti <- procrustes(mds.anti_B_QD,mds.anti, symmetric = TRUE)
summary(pro.anti_B.anti)

plot(pro.anti_B.anti, kind = 2)
residuals(pro.anti_B.anti)

set.seed(619)
pro.anti_B_t <- protest(mds.anti_B_QD,mds.anti, permutations = 999)
pro.anti_B_t

pro.anti_B_t$ss
pro.anti_B_t$signif

Pro_Y <- cbind(data.frame(pro.anti_B.anti$Yrot), data.frame(pro.anti_B.anti$X))
Pro_X <- data.frame(pro.anti_B.anti$rotation)

ggplot(data=Pro_Y) +
  geom_segment(aes(x = X1, y = X2,xend = (X1 + Dim1)/2, yend = (X2 + Dim2)/2), 
               arrow = arrow(length = unit(0, 'cm')),color = "#9BBB59", size = 1) +
  geom_segment(aes(x = (X1 + Dim1)/2, y = (X2 + Dim2)/2,
                   xend = Dim1, yend = Dim2),
               arrow = arrow(length = unit(0.2, 'cm')),
               color = "#957DB1", size = 1) +
  geom_point(aes(X1, X2), color = "#9BBB59", size = 3, shape = 16) +
  geom_point(aes(Dim1, Dim2), color = "#957DB1", size = 3, shape = 16) +
  theme(panel.grid = element_blank(), panel.background = element_rect(color = 'black',fill = 'transparent'),
        legend.key = element_rect(fill = 'transparent'),
        axis.ticks.length = unit(0.4,"lines"),axis.ticks = element_line(color='black'),
        axis.line = element_line(colour = "black"),
        axis.title.x=element_text(colour='black', size=14),
        axis.title.y=element_text(colour='black', size=14),
        axis.text=element_text(colour='black',size=12)) +
  labs(x = 'Dimension 1', y = 'Dimension 2', color = '') +
  labs(title="Correlation between community and environment") +
  annotate('text', label = 'Procrustes analysis:\n
                    M2 = 0.431, p-value = 0.001',
           x = -0.3, y = 0.1, size = 4,hjust = 0) +
  theme(plot.title = element_text(size=14,colour = "black",
                                  hjust = 0.5,face = "bold"))

Antibiotic_ab <- as.data.frame(t(Antibiotic_ab))

B_process_SJ <- data.frame(mds.anti_B_SJ) 
B_process_SJ <- B_process_SJ[,c(1,2)]
B_process_QD <- data.frame(mds.anti_B_QD) 
B_process_QD <- B_process_QD[,c(1,2)]


B_mod <- varpart(Antibiotic_ab, B_process_SJ, B_process_QD, transfo="hel")
B_mod

plot(B_mod, bg = c("hotpink","skyblue"))





##### Metagenom ####

## KEGG
Kegg_ko <- read.table("Kegg_table.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
Kegg_ko[is.na(Kegg_ko)] <- 0
Kegg_tax <- read.table("Kegg_tax.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)

edgeR_kegg <- DGEList(counts=Kegg_ko, 
                      group=metadata1$Treatment1,
                      genes=Kegg_tax)

edgeR_kegg <- calcNormFactors(edgeR_kegg)

otu_norm_kegg <- cpm(edgeR_kegg, normalized.lib.sizes=T, log=F)

## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_kegg <- otu_table(Kegg_ko,taxa_are_rows=T)
phy_tax_kegg <-tax_table(as.matrix(Kegg_tax))
phy_design_kegg <- sample_data(metadata1)
physeq_kegg <- phyloseq(phy_kegg,phy_design_kegg,phy_tax_kegg)


## Create bray-curtis dissimiliartiy matrix
all_dis_kegg <- vegdist(t(otu_table(physeq_kegg)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects 
paov_all_kegg <- adonis2(all_dis_kegg ~Treatment1, data=metadata1, permutations=9999)

##### Supplementary Table S2: global PERMANOVA #####
paov_all_kegg  

Kegg_tax_tab <- Kegg_tax[c(which( Kegg_tax$Pathway=="Flagellar assembly"),
                           which(Kegg_tax$Pathway=="Bacterial chemotaxis"),
                           which(Kegg_tax$Pathway=="Biosynthesis of vancomycin group antibiotics"),
                           which( Kegg_tax$Pathway=="Nitrogen metabolism"),
                           which( Kegg_tax$Pathway=="Carotenoid biosynthesis"),
                           which(Kegg_tax$Pathway=="Atrazine degradation"),
                           which(Kegg_tax$Pathway=="Methane metabolism"),
                           which(Kegg_tax$Pathway=="Chloroalkane and chloroalkene degradation"),
                           which(Kegg_tax$Pathway=="Polycyclic aromatic hydrocarbon degradation"),
                           which(Kegg_tax$Pathway=="Toluene degradation"),
                           which(Kegg_tax$Pathway=="Sphingolipid metabolism"),
                           which(Kegg_tax$Pathway=='Arachidonic acid metabolism'),
                           which(Kegg_tax$Pathway=='Ether lipid metabolism'),
                           which(Kegg_tax$Pathway=='Glycerophospholipid metabolism'),
                           which(Kegg_tax$Pathway=='Polyketide sugar unit biosynthesis'),
                           which(Kegg_tax$Pathway=='Streptomycin biosynthesis'),
                           which(Kegg_tax$Pathway=='Phosphonate and phosphinate metabolism'),
                           which(Kegg_tax$Pathway=='Taurine and hypotaurine metabolism'),
                           which( Kegg_tax$Pathway=='Chlorocyclohexane and chlorobenzene degradation'),
                           which( Kegg_tax$Pathway=='Penicillin and cephalosporin biosynthesis')),]

Kegg_tab <- Kegg_ko[rownames(Kegg_tax_tab),]



## Soil bacteria: Calculate percentage of sequences classified into each phylum
Kegg_B_RA <- t(t(Kegg_tab)/colSums(Kegg_tab)) * 100
colSums(Kegg_B_RA)
nrow(Kegg_B_RA)

## Get names of bacteria phyla present (use 'labels' as this specifies class within Proteobacteria)
PHYLAnames_B <- names(sort(table(Kegg_tax_tab[,"Pathway"]), decr=T))
length(PHYLAnames_B)
sort(table(Kegg_tax_tab[,"Pathway"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(Kegg_B_RA)
for (i in PHYLAnames_B){
  x <- array(colSums(Kegg_B_RA[rownames(Kegg_tax_tab)[which(Kegg_tax_tab$Pathway== paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}


## Create matrix
rownames(y) <- paste(PHYLAnames_B)
colnames(y) <- paste(colnames(Kegg_B_RA))
PHYLUM_mat_B <- y
PHYLUM_mat_B[,1:5]
colSums(PHYLUM_mat_B)
PHYLUM_mat_B_mean <- sort(apply(PHYLUM_mat_B,1,mean),decr=T)
PHYLUM_mat_B <- PHYLUM_mat_B[names(PHYLUM_mat_B_mean),]

PHYLUM_mat_B <- as.data.frame(t(PHYLUM_mat_B))
PHYLUM_mat_B$Treatment <- metadata1$Treatment1

for(i in PHYLUM_mat_B[,1:18]) {
  fit <- aov(i~Treatment,data = PHYLUM_mat_B)
  print(summary(fit))
  out <- HSD.test(fit,"Treatment")
  print(out$groups)
}




## NR
NR <- read.table("NR_table.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
NR_tax <- read.table("NR_tax.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)

NR_tax_B <- NR_tax[which(NR_tax$Kingdom=="Bacteria"),]
NR_B <- NR[rownames(NR_tax_B),]

# create separate taxonomy label specifying classes of Proteobacteria
NR_tax_B$labels <- NR_tax_B$Phylum
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$Class=="Alphaproteobacteria" ], ]$labels <- "Alphaproteobacteria"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$Class=="Betaproteobacteria" ], ]$labels <- "Betaproteobacteria"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$Class=="Gammaproteobacteria" ], ]$labels <- "Gammaproteobacteria"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$Class=="Deltaproteobacteria" ], ]$labels <- "Deltaproteobacteria"
table(NR_tax_B$labels)

### Defining bOTU colors by phylum (using the taxonomy file)
NR_tax_B$cols <- NR_tax_B$labels
table(NR_tax_B$cols)

edgeR_NR <- DGEList(counts=NR, 
                    group=metadata1$Treatment1,
                    genes=NR_tax)

edgeR_NR <- calcNormFactors(edgeR_NR)

otu_norm_NR <- cpm(edgeR_NR, normalized.lib.sizes=T, log=F)

## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_NR <- otu_table(NR,taxa_are_rows=T)
phy_tax_NR <-tax_table(as.matrix(NR_tax))
phy_design_NR <- sample_data(metadata1)
physeq_NR <- phyloseq(phy_NR,phy_design_kegg,phy_tax_NR)


## Create bray-curtis dissimiliartiy matrix
all_dis_NR <- vegdist(t(otu_table(physeq_NR)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects 
paov_all_NR <- adonis2(all_dis_NR ~Treatment1, data=metadata1, permutations=9999)

##### Supplementary Table S2: global PERMANOVA #####
paov_all_NR  





## CAZy
CAZy <- read.table("CAZy_table.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
CAZy_tax <- read.table("CAZy_tax.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)

edgeR_CAZy <- DGEList(counts=CAZy, 
                      group=metadata1$type,
                      genes=CAZy_tax)

edgeR_CAZy <- calcNormFactors(edgeR_CAZy)

otu_norm_CAZy <- cpm(edgeR_CAZy, normalized.lib.sizes=T, log=F)

## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_CAZy <- otu_table(CAZy,taxa_are_rows=T)
phy_tax_CAZy <-tax_table(as.matrix(CAZy_tax))
phy_design_CAZy <- sample_data(metadata1)
physeq_CAZy <- phyloseq(phy_CAZy,phy_design_CAZy,phy_tax_CAZy)


## Create bray-curtis dissimiliartiy matrix
all_dis_CAZy <- vegdist(t(otu_table(physeq_CAZy)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects 
paov_all_CAZy <- adonis2(all_dis_CAZy ~Treatment1, data=metadata1, permutations=9999)

##### Supplementary Table S2: global PERMANOVA #####
paov_all_CAZy  



## COG
COG <- read.table("COG_table.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
# COG_tax <- read.table("COG_tax.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)

edgeR_COG <- DGEList(counts=COG, 
                     group=metadata1$type)

edgeR_COG <- calcNormFactors(edgeR_COG)

otu_norm_COG <- cpm(edgeR_COG, normalized.lib.sizes=T, log=F)

## Input TMM normalized counts, taxonomy, and design of bulk root bacteria community into phyloseq objects
## for further analysis
phy_COG <- otu_table(COG,taxa_are_rows=T)
phy_design_COG <- sample_data(metadata1)
physeq_COG <- phyloseq(phy_COG,phy_design_COG)


## Create bray-curtis dissimiliartiy matrix
all_dis_COG <- vegdist(t(otu_table(physeq_COG)),method="bray")

##### B overall PERMANOVA #####
## Perform PERMANVOA testing for sample type and cropping system effects 
paov_all_COG <- adonis2(all_dis_COG ~Treatment1, data=metadata1, permutations=9999)

##### Supplementary Table S2: global PERMANOVA #####
paov_all_COG




##kegg_diversity
pcoa_kegg <- ordinate(physeq_kegg,"PCoA","bray")
pcoa_all_kegg <- plot_ordination(physeq_kegg, pcoa_kegg, type="sites", color ="Treatment1")
pcoa_all_kegg1 <- pcoa_all_kegg+
  geom_point(size=5)+
  xlab(paste("PCo 1", paste("(",round(pcoa_all_kegg$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_all_kegg$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("KEGG")

set.seed(619)
cp_kegg <- as.data.frame(t(rrarefy(t(Kegg_ko), min(colSums(Kegg_ko)))))
Kegg_shannon <- vegan::diversity(t(cp_kegg), index = "shannon")

chao1 <- t(estimateR(t(cp_kegg)))
chao1 <- as.data.frame(chao1)

metadata1$shannon <- Kegg_shannon
metadata1$chao1 <- chao1$S.chao1


soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 8 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 8 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 8 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 8 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 8 ]


my_comparisons = list( c('soil_NO', 'soil_ADD'), c("root_NO", "root_ADD"), c("soil_NO", "film_ADD"), c("root_NO", "film_ADD")  )

Kegg_diversity <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=chao1, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="Kegg Shannon index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 7 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 7 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 7 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 7 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 7 ]

Kegg_shannon <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=shannon, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="Kegg Shannon index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")




Kegg_tax_de <- Kegg_tax[which(Kegg_tax$De=="YB"),]
Kegg_ko_de <- cp_kegg[rownames(Kegg_tax_de),]


## Define soil samples by management system
root_0_samples <- rownames(metadata1)[which(metadata1$Treatment1 == "root_0")]
root_600_samples <- rownames(metadata1)[which(metadata1$Treatment1 == "root_600")]
soil_0_samples <- rownames(metadata1)[which(metadata1$Treatment1 == "soil_0")]
soil_600_samples <- rownames(metadata1)[which(metadata1$Treatment1 == "soil_600")]
film_600_samples <- rownames(metadata1)[which(metadata1$Treatment1 == "film_600")]

cp_kegg_mean_treat <-as.matrix(cbind(`root_0`=apply(Kegg_ko_de[,root_0_samples],1,mean),
                                     `root_600`=apply(Kegg_ko_de[,root_600_samples],1,mean),
                                     `soil_0`=apply(Kegg_ko_de[,soil_0_samples],1,mean),
                                     `soil_600`=apply(Kegg_ko_de[,soil_600_samples],1,mean),
                                     `film_600`=apply(Kegg_ko_de[,film_600_samples],1,mean)))

cp_kegg_mean_treat_mean <- sort(apply(cp_kegg_mean_treat,1,mean),decr=F)
cp_kegg_mean_treat <- cp_kegg_mean_treat[names(cp_kegg_mean_treat_mean),]

cp_kegg_mean_treat <- as.matrix(cp_kegg_mean_treat)

Kegg_tax_de <- Kegg_tax_de[rownames(cp_kegg_mean_treat),]

colors <- maPalette(l="lightgray",m="lightskyblue",h="orangered3", k=60)
heatmap.2(log(cp_kegg_mean_treat+1), col=colors, Rowv=F, Colv=F, margins=c(5,12),scale="none", trace="none"
          ,density.info="none",key.title=NA,srtCol=45,cexRow = 0.6,
          labRow=rownames(cp_kegg_mean_treat),RowSideColors=end_F_sidecol,
          dendrogram="none",key.xlab=expression(paste("Relative OTU abundance"," (log"[2]," CPM)")))

end_F_sidecol <- Kegg_tax_de$Pathway
names(end_F_sidecol) <- end_F_sidecol

end_F_sidecol[end_F_sidecol == "Steroid degradation"] <- "seashell4"
end_F_sidecol[end_F_sidecol == "Polycyclic aromatic hydrocarbon degradation"] <- "red"
end_F_sidecol[end_F_sidecol == "Benzoate degradation"] <- "darkslateblue"
end_F_sidecol[end_F_sidecol == "Caprolactam degradation"] <- "orchid"
end_F_sidecol[end_F_sidecol == "Atrazine degradation"] <- "orange"
end_F_sidecol[end_F_sidecol == "Nitrotoluene degradation"] <- "blue"
end_F_sidecol[end_F_sidecol == "Furfural degradation"] <- "yellow"
end_F_sidecol[end_F_sidecol == "Xylene degradation"] <- "green"
end_F_sidecol[end_F_sidecol == "Chlorocyclohexane and chlorobenzene degradation"] <- "purple"
end_F_sidecol[end_F_sidecol == "Toluene degradation"] <- "tomato"
end_F_sidecol[end_F_sidecol == "Aminobenzoate degradation"] <- "paleturquoise2"
end_F_sidecol[end_F_sidecol == "Limonene and pinene degradation"] <- "white"
end_F_sidecol[end_F_sidecol == "Dioxin degradation"] <- "palegreen3"


plot.new()
pdf(paste0("FigureS8_itslegend.pdf"),height=10, width=10)
par(mar=c(0,0,0,0))
plot(1:20,type="n",axes=F,ann=F)
legend(10,10,legend=names(end_F_sidecol),fill=end_F_sidecol,bty="n",cex=0.7, border=end_F_sidecol,
       x.intersp=0.1,y.intersp=1,ncol=2)
dev.off()


## barplot
cp_kegg_mean_treat_three_bar <- as.data.frame(t(cp_kegg_mean_treat))


par(mfrow=c(1, 3))
barplot_kegg <- barplot(cp_kegg_mean_treat_three_bar$K15983, las=2,  cex.lab=1, cex.axis=.7, cex.names=.7, main="K15983", border=F)

barplot_kegg <- barplot(cp_kegg_mean_treat_three_bar$K14731, las=2,  cex.lab=1, cex.axis=.7, cex.names=.7, main="K14731", border=F)

barplot_kegg <- barplot(cp_kegg_mean_treat_three_bar$K01512, las=2,  cex.lab=1, cex.axis=.7, cex.names=.7, main="K01512", border=F)





##NR_diversity
pcoa_NR <- ordinate(physeq_NR,"PCoA","bray")
pcoa_all_NR <- plot_ordination(physeq_NR, pcoa_NR, type="sites", color ="Treatment1")
pcoa_all_NR1 <- pcoa_all_NR+
  geom_point(size=5)+
  xlab(paste("PCo 1", paste("(",round(pcoa_all_NR$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_all_NR$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("NR")


cp_NR <- as.data.frame(t(rrarefy(t(NR), min(colSums(NR)))))
NR_shannon <- vegan::diversity(t(cp_NR), index = "shannon")

chao1 <- t(estimateR(t(cp_NR)))
chao1 <- as.data.frame(chao1)

metadata1$NR_shannon <- NR_shannon
metadata1$NR_chao1 <- chao1$S.chao1

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 10 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 10 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 10 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 10 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 10 ]

NR_diversity <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=NR_chao1, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="NR chao1 index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 9 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 9 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 9 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 9 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 9 ]

NR_shannon <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=NR_shannon, fill =Treatment2))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="NR Shannon index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")





## Soil bacteria: Calculate percentage of sequences classified into each phylum
NR_B_RA <- t(t(NR_B)/colSums(NR_B)) * 100
colSums(NR_B_RA)
nrow(NR_B_RA)

## Get names of bacteria phyla present (use 'labels' as this specifies class within Proteobacteria)
PHYLAnames_B <- names(sort(table(NR_tax_B[,"labels"]), decr=T))
length(PHYLAnames_B)
sort(table(NR_tax_B[,"labels"]), decr=T)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(NR_B_RA)
for (i in PHYLAnames_B){
  x <- array(colSums(NR_B_RA[rownames(NR_tax_B)[which(NR_tax_B$labels == paste(i))],,drop=FALSE]))
  y <- rbind(y,x)
}


## Create matrix
rownames(y) <- paste(PHYLAnames_B)
colnames(y) <- paste(colnames(NR_B_RA))
PHYLUM_mat_B <- y
PHYLUM_mat_B[,1:5]
colSums(PHYLUM_mat_B)
PHYLUM_mat_B_mean <- sort(apply(PHYLUM_mat_B,1,mean),decr=T)
PHYLUM_mat_B <- PHYLUM_mat_B[names(PHYLUM_mat_B_mean),]


new_B_cols<-c("CK1","CK2","CK3","PE1","PE2","PE3","PBAT1","PBAT2","PBAT3","PLA1","PLA2","PLA3")

PHYLUM_mat_B_mean_type <- PHYLUM_mat_B[, c(new_B_cols)]


# Phyla with MEAN abundances lower than 1% relative abundances
table(apply(PHYLUM_mat_B_mean_type, 1, mean) < 1)
low_count_phyla_B <- rownames(PHYLUM_mat_B_mean_type)[sort(apply(PHYLUM_mat_B_mean_type, 1, mean), decr=T) < 1]
# attribute grey color
for(i in low_count_phyla_B){
  NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels==paste(i) ], ]$cols <- "lightgrey"
}
table(NR_tax_B$cols)

# Phyla with MEAN abundances higher than 1% relative abundances
abundant_phyla_B <- rownames(PHYLUM_mat_B_mean_type)[sort(apply(PHYLUM_mat_B_mean_type, 1, mean), decr=T) > 1]
abundant_phyla_B
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Betaproteobacteria" ], ]$cols <- "lightcoral"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Gammaproteobacteria" ], ]$cols <- "palegreen3"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Alphaproteobacteria" ], ]$cols <- "palegreen1"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Acidobacteria" ], ]$cols <- "palegreen4"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Actinobacteria" ], ]$cols <- "dodgerblue"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Bacteroidetes" ], ]$cols <- "sandybrown"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Chloroflexi" ], ]$cols <- "plum1"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Deltaproteobacteria" ], ]$cols <- "palegreen2"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Planctomycetes" ], ]$cols <- "orchid"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Gemmatimonadetes" ], ]$cols <- "steelblue4"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Verrucomicrobia" ], ]$cols <- "steelblue1"
NR_tax_B[ rownames(NR_tax_B)[NR_tax_B$labels=="Proteobacteria" ], ]$cols <- "orange"


## collaps OTU colors to prepare Phylum level colors
label_cols_B <- NR_tax_B[, c("labels", "cols") ]
library(plyr)
PHYLA_label_cols_B <- ddply(label_cols_B, .variables="cols", .fun=unique)
rownames(PHYLA_label_cols_B) <- PHYLA_label_cols_B[,1]
PHYLA_label_cols_B <- PHYLA_label_cols_B[c(abundant_phyla_B, low_count_phyla_B),]
PHYLA_label_cols_B

## Legend for Phylum colors
PHYLA_label_cols_B_legend <- PHYLA_label_cols_B[1:12,]
PHYLA_label_cols_B_legend[11,1] <- "other"
rownames(PHYLA_label_cols_B_legend)[12] <- "other"
PHYLA_label_cols_B_legend


##### Plot Supplementary Figure S3
par(oma=c(0,0,0,0), mar=c(6,4,1,5), xpd=NA)
phylum_bar_B <- barplot(as.matrix(PHYLUM_mat_B_mean_type), col=PHYLA_label_cols_B[rownames(PHYLUM_mat_B_mean_type),]$cols, ylim=c(0,100), xaxt="n", border=NA, las=2)
axis(1, at=phylum_bar_B, labels=colnames(PHYLUM_mat_B_mean_type), col.axis="black", las=2, cex.axis=1)
title(ylab="Relative abundance (%)")
title(main="Bacteria Community")
legend(14.5, 100, bty="n", cex=0.7, x.intersp= 0.1, y.intersp=1,
       legend=rev(PHYLA_label_cols_B_legend$labels), 
       fill=rev(PHYLA_label_cols_B_legend$cols), 
       border=rev(PHYLA_label_cols_B_legend$cols) )







##CAZy_diversity
pcoa_CAZy <- ordinate(physeq_CAZy,"PCoA","bray")
pcoa_all_CAZy <- plot_ordination(physeq_CAZy, pcoa_CAZy, type="sites", color ="Treatment1")
pcoa_all_CAZy1 <- pcoa_all_CAZy+
  geom_point(size=5)+
  xlab(paste("PCo 1", paste("(",round(pcoa_all_CAZy$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_all_CAZy$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("CAZy")


cp_CAZy <- as.data.frame(t(rrarefy(t(CAZy), min(colSums(CAZy)))))
CAZy_shannon <- vegan::diversity(t(cp_CAZy), index = "shannon")

chao1 <- t(estimateR(t(cp_CAZy)))
chao1 <- as.data.frame(chao1)

metadata1$CAZy_shannon <- CAZy_shannon
metadata1$CAZy_chao1 <- chao1$S.chao1

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 12 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 12 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 12 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 12 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 12 ]

CAZy_chao1 <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=CAZy_chao1, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="CAZy chao1 index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 11 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 11 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 11 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 11 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 11 ]

CAZy_shannon <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=CAZy_shannon, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="CAZy Shannon index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")



##COG_diversity
pcoa_COG <- ordinate(physeq_COG,"PCoA","bray")
pcoa_all_COG <- plot_ordination(physeq_COG, pcoa_COG, type="sites", color ="Treatment1")
pcoa_all_COG1 <- pcoa_all_COG+
  geom_point(size=5)+
  xlab(paste("PCo 1", paste("(",round(pcoa_all_COG$values[1,2]*100,1),"%",")",sep=""),sep=" "))+
  ylab(paste("PCo 2", paste("(",round(pcoa_all_COG$values[2,2]*100,1),"%",")",sep=""),sep=" "))+
  theme(legend.position="bottom",legend.title=element_blank(),legend.key = element_blank())+
  guides(color=guide_legend(nrow=2,byrow=TRUE))+
  guides(shape=guide_legend(nrow=1,byrow=TRUE))+
  theme(plot.title = element_text(face="bold", hjust = 0.5))+
  ggtitle("COG")

set.seed(619)
cp_COG <- as.data.frame(t(rrarefy(t(COG), min(colSums(COG)))))
COG_shannon <- vegan::diversity(t(cp_COG), index = "shannon")

chao1 <- t(estimateR(t(cp_COG)))
chao1 <- as.data.frame(chao1)

metadata1$COG_shannon <- COG_shannon
metadata1$COG_chao1 <- chao1$S.chao1

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 14 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 14 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 14 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 14 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 14 ]

COG_diversity <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=COG_chao1, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="COG chao1 index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")

soil_NO  <- metadata1[metadata1$Treatment2=="soil_NO", 13 ]
soil_ADD  <- metadata1[metadata1$Treatment2=="soil_ADD", 13 ]
root_NO  <- metadata1[metadata1$Treatment2=="root_NO", 13 ]
root_ADD  <- metadata1[metadata1$Treatment2=="root_ADD", 13 ]
film_ADD  <- metadata1[metadata1$Treatment2=="film_ADD", 13 ]

COG_shannon <- ggplot(metadata1, aes(x=factor(Treatment2,levels = c("soil_NO","soil_ADD","film_ADD","root_NO","root_ADD")), y=COG_shannon, fill =Treatment1))+
  geom_boxplot(alpha=1, outlier.size=0, size=0.7, width=0.5) +
  scale_fill_manual(values=c("white","#3CB371","#DAA520","gray30","blue"))+
  geom_jitter( position=position_jitter(0.17), size=1, alpha=0.7)+
  theme_bw()+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  labs(x="Types", y="COG Shannon index")+
  stat_compare_means(comparisons = my_comparisons,
                     label = "p.signif",
                     method = "t.test")



grid.newpage()
grid.arrange(NR_diversity,NR_shannon,CAZy_chao1,CAZy_shannon,ncol = 2)

grid.newpage()
grid.arrange(pcoa_all_kegg1,pcoa_all_NR1,pcoa_all_CAZy1,pcoa_all_COG1,ncol = 4)




## Lefse
library(microeco)

Kegg_tax_cycle <- Kegg_tax[-which(Kegg_tax$Cycle == "NO"),]
# Kegg_tax_cycle$KO <- row.names(Kegg_tax_cycle)
# Kegg_tax_cycle <- Kegg_tax_cycle[,-2]
Kegg_ko_cycle <- cp_kegg[rownames(Kegg_tax_cycle),]

dataset <- microtable$new(sample_table = metadata1,
                          otu_table = Kegg_ko_cycle, 
                          tax_table = Kegg_tax_cycle)

set.seed(619)
lefse <- trans_diff$new(dataset = dataset, 
                        method = "lefse", 
                        group = "Treatment1", 
                        alpha = 0.05, 
                        p_adjust_method = "none",
                        taxa_level = "Cycle",
                        lefse_subgroup = NULL)


head(lefse$res_diff)


lefse$plot_diff_bar(use_number = 1:30, 
                    width = 0.8, 
                    group_order = c("soil_0", "soil_600","film_600", "root_0", "root_600")) +
  ggsci::scale_color_npg() +
  ggsci::scale_fill_npg()



##### env #####
## Bacteria
###  Env
env <- read.table("env.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F,quote = "")


env$Treatment <- design_B[c(13:24),c(3:3)] 

for(i in env[,2:8]) {
  fit <- aov(i~Treatment,data = env)
  print(summary(fit))
  out <- HSD.test(fit,"Treatment")
  print(out$groups)
}

env <- env[,-1]

### RDA
env_log <- log10(env)
env_log <- env_log[,-8]

### Bacteria RDA
B_soil_design_rda <- design_B[which(design_B$Site=="soil"),]

env_log <- env_log[rownames(B_soil_design_rda),]

B_soil_otu_rda <- otu_B[,rownames(B_soil_design_rda)]
B_soil_otu_rda <- decostand(B_soil_otu_rda,method = "hellinger")
B_soil_otu_rda <- t(B_soil_otu_rda)
B_soil_otu_rda <- as.data.frame(B_soil_otu_rda, scale = FALSE)

B_soil_rda <- rda(B_soil_otu_rda~.,env_log)
B_soil_rda_ill <- summary(B_soil_rda)

vif.cca(B_soil_rda)
anova(B_soil_rda, by = "term", permutations=999)

RsquareAdj(B_soil_rda)
RsquareAdj(rda(B_soil_otu_rda~pH+SOM+N+MBC+MBN+DOC+AP,data=env_log))$adj.r.squared

st=as.data.frame(B_soil_rda_ill$sites)[1:2]
yz=as.data.frame(B_soil_rda_ill$biplot)[1:2]*3

a <- ggplot(data = st,aes(RDA1,RDA2)) +
  geom_point(aes(color = B_soil_design_rda$con,size=4))+
  geom_segment(data = yz,aes(x = 0, y = 0, xend = RDA1, yend = RDA2), 
               arrow = arrow(angle=22.5,length = unit(0.35,"cm"),
                             type = "closed"),linetype=1, size=0.6,colour = "blue")+
  geom_text_repel(data = yz,aes(RDA1,RDA2,label=row.names(yz)))+
  labs(x="RDA1 27.55%",y="RDA2 18.92%")+
  geom_hline(yintercept=0,linetype=3,size=1) + 
  geom_vline(xintercept=0,linetype=3,size=1)+
  guides(shape=guide_legend(title=NULL,color="black"),
         fill=guide_legend(title=NULL))+
  theme_bw()+theme(panel.grid=element_blank())




##### WGCNA #####
library(WGCNA)


##### Bacteria #####
B_soil_gsg <- goodSamplesGenes(B_soil_otu_rda, verbose = 3)
B_soil_gsg$allOK

if (!B_soil_gsg$allOK) {
  # Optionally, print the gene and sample names that were removed:
  if (sum(!B_soil_gsg$goodGenes)>0)
    printFlush(paste("Removing genes:", paste(names(B_soil_otu_rda)[!B_soil_gsg$goodGenes], collapse = ", ")));
  if (sum(!B_soil_gsg$goodSamples)>0)
    printFlush(paste("Removing samples:", paste(rownames(B_soil_otu_rda)[!B_soil_gsg$goodSamples], collapse = ", ")));
  # Remove the offending genes and samples from the data:
  B_soil_otu_rda <- B_soil_otu_rda[B_soil_gsg$goodSamples, B_soil_gsg$goodGenes]
}


B_soil_sample_tree <- hclust(dist(B_soil_otu_rda), method = "average")
plot(B_soil_sample_tree, main = "Sample clustering to detect outliers", sub="", xlab="")
abline(h = 25, col = "red")
clust <- cutreeStatic(B_soil_sample_tree, cutHeight = 25, minSize = 10)
table(clust)
B_soil_keep_samples <- (clust==1)
B_soil_expr <- B_soil_otu_rda[B_soil_keep_samples, ]

powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))

B_soil_sft <- pickSoftThreshold(B_soil_expr, powerVector = powers, verbose = 5)
B_soil_fit <- B_soil_sft$fitIndices

B_soil_r2 = -sign(B_soil_fit$slope)*B_soil_fit$SFT.R.sq
B_soil_rp <- ggplot(B_soil_fit, aes(x=Power, y=SFT.R.sq)) + geom_point()
B_soil_rp <- B_soil_rp + geom_text(aes(label=Power), size=3, vjust=-1) + labs(x="Soft Threshold (power)", y="R^2")

B_soil_rp + annotate(geom = "point", x = 4, y = B_soil_fit$SFT.R.sq[which(B_soil_fit$Power == 4)], colour = "red")

B_soil_adj <- adjacency(B_soil_expr, power = 4)

B_soil_tom <- TOMsimilarity(B_soil_adj)

B_soil_diss_tom <- 1 - B_soil_tom

B_soil_gene_tree <- hclust(as.dist(B_soil_diss_tom), method = "average")

min_module_size <- 30

B_soil_dynamic_mods <- cutreeDynamic(dendro = B_soil_gene_tree, distM = B_soil_diss_tom, deepSplit = 2, pamRespectsDendro = FALSE, minClusterSize = min_module_size)

B_soil_dynamic_colors <- labels2colors(B_soil_dynamic_mods)

B_soil_me_list <- moduleEigengenes(B_soil_expr, colors = B_soil_dynamic_colors)
B_soil_mes <- B_soil_me_list$eigengenes

B_soil_me_diss <- 1 - cor(B_soil_mes)

B_soil_me_tree <- hclust(as.dist(B_soil_me_diss), method = "average")

plot(B_soil_me_tree, main = "Clustering of module eigengenes", xlab = "", sub = "")
B_soil_me_diss_thres <- 0.25

abline(h=B_soil_me_diss_thres , col = "red")

B_soil_merge <- mergeCloseModules(B_soil_expr, B_soil_dynamic_colors, cutHeight = B_soil_me_diss_thres, verbose = 3)

B_soil_merged_colors <- B_soil_merge$colors

B_soil_merged_mes <- B_soil_merge$newMEs
B_soil_module_colors <- B_soil_merged_colors
B_soil_color_order <- c("grey", standardColors(50))
B_soil_module_labels <- match(B_soil_module_colors, B_soil_color_order) - 1
B_soil_mes <- B_soil_merged_mes
# save(mes, module_labels, module_colors, gene_tree, file = "female_liver_02.RData")

B_soil_n_genes <- ncol(B_soil_expr)
B_soil_n_samples <- nrow(B_soil_expr)
B_soil_mes0 <- moduleEigengenes(B_soil_expr, B_soil_module_colors)$eigengenes
B_soil_mes <- orderMEs(B_soil_mes0)
B_soil_module_trait_cor <- cor(B_soil_mes, env_log, use = "p")
B_soil_module_trait_pvalue <- corPvalueStudent(B_soil_module_trait_cor, B_soil_n_samples)

B_soil_text_matrix <- paste(signif(B_soil_module_trait_cor, 2), "\n(", signif(B_soil_module_trait_pvalue, 1), ")", sep = "")
dim(B_soil_text_matrix) = dim(B_soil_module_trait_cor)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = B_soil_module_trait_cor, xLabels = names(env_log), 
               yLabels = names(B_soil_mes), ySymbols = names(B_soil_mes), 
               colorLabels = FALSE, colors = greenWhiteRed(50),
               textMatrix = B_soil_text_matrix, 
               setStdMargins = FALSE, cex.text = 0.2,
               zlim = c(-1,1), main = paste("Module-trait relationships"))



B_soil_kme <- signedKME(B_soil_expr, B_soil_mes, outputColumnName="kME.")

B_soil_filtered <- abs(B_soil_kme$kME.palevioletred3) > 0.8
B_soil_hubgene_magenta <- rownames(B_soil_kme)[B_soil_filtered]
B_soil_hubgene_magenta






#### Indicate speices
## Bacteria
## Define soil samples by management system
CK_samples <- rownames(design_B_soil[design_B_soil$con=="CK",])
ZERO_samples <- rownames(design_B_soil[design_B_soil$con=="0",])
LOW_samples <- rownames(design_B_soil[design_B_soil$con=="150",])
HIGH_samples <- rownames(design_B_soil[design_B_soil$con=="600",])

## Soil bacteria: Calculate percentage of sequences classified into each phylum
otu_B_soil_mso <- cp_otu_B_soil[B_soil_hubgene_magenta,]
otu_B_soil_mso_ra <- t(t(otu_B_soil_mso)/colSums(otu_B_soil_mso)) * 100

PHYLAnames_soil_mso_B <- names(sort(table(tax_soil_B[B_soil_hubgene_magenta,]$Phylum),decr=T))
length(PHYLAnames_soil_mso_B)

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(otu_B_soil_mso_ra)
for (i in PHYLAnames_soil_mso_B){
  x <- array(colSums(otu_B_soil_mso_ra[rownames(tax_soil_B[B_soil_hubgene_magenta,])[which(tax_soil_B[B_soil_hubgene_magenta,]$Phylum == paste(i))], ,drop=FALSE]))
  y <- rbind(y,x)
}

## Create matrix
rownames(y) <- paste(PHYLAnames_soil_mso_B)
colnames(y) <- paste(colnames(otu_B_soil_mso_ra))
PHYLUM_mat_otu_soil_B_mso <- y
PHYLUM_mat_otu_soil_B_mso_mean <- sort(apply(PHYLUM_mat_otu_soil_B_mso,1,mean),decr=T)
PHYLUM_mat_otu_soil_B_mso <- PHYLUM_mat_otu_soil_B_mso[names(PHYLUM_mat_otu_soil_B_mso_mean),]

## Get sequences abundances by phylum
PHYLUM_mat_otu_soil_B_mso_mean

## Phylum matrix for heatmap of phyla abundances across 
soil_B_mso_ra <- cp_otu_B_soil[B_soil_hubgene_magenta,]

## Preparation of matrix with relative abundance by phylum
y <- NULL
otunames <- rownames(soil_B_mso_ra)
for (i in PHYLAnames_soil_mso_B){
  x <- array(colSums(soil_B_mso_ra[rownames(tax_soil_B[B_soil_hubgene_magenta,])[which(tax_soil_B[B_soil_hubgene_magenta,]$Phylum == paste(i))], ,drop=FALSE]))
  y <- rbind(y,x)
}

## Create matrix
rownames(y) <- paste(PHYLAnames_soil_mso_B)
colnames(y) <- paste(colnames(soil_B_mso_ra))
PHYLUM_mat_soil_B_mso <- y
PHYLUM_mat_soil_B_mso_mean <- sort(apply(PHYLUM_mat_soil_B_mso,1,mean),decr=T)
PHYLUM_mat_soil_B_mso <- PHYLUM_mat_soil_B_mso[names(PHYLUM_mat_soil_B_mso_mean),]

## Make matrix of phyla abundances by cropping system
soil_B_mso_phylum <-as.matrix(cbind(`CK`=apply(PHYLUM_mat_soil_B_mso[,CK_samples],1,mean),
                                    `ZERO`=apply(PHYLUM_mat_soil_B_mso[,ZERO_samples],1,mean),
                                    `LOW`=apply(PHYLUM_mat_soil_B_mso[,LOW_samples],1,mean),
                                    `HIGH`=apply(PHYLUM_mat_soil_B_mso[,HIGH_samples],1,mean)))


## Plot Figure S7a
pdf(paste0("B_Phylum_heatmap_soil.pdf"),height=10, width=10)
par(las=1)
colors <- maPalette(l="lightgray",m="lightskyblue",h="orangered3", k=60)
heatmap.2(log2(soil_B_mso_phylum+1), col=colors, Rowv=F, Colv=F, margins=c(5,12),scale="none", trace="none"
          ,density.info="none",key.title=NA,srtCol=45,cexRow = 0.6,
          labRow=rownames(soil_B_mso_phylum),
          dendrogram="none",key.xlab=expression(paste("Relative OTU abundance"," (log"[2]," CPM)")))
dev.off()


soil_B_mso <-as.matrix(cbind(`CK`=apply(cp_otu_B_soil[B_soil_hubgene_magenta,CK_samples],1,mean),
                             `ZERO`=apply(cp_otu_B_soil[B_soil_hubgene_magenta,ZERO_samples],1,mean),
                             `LOW`=apply(cp_otu_B_soil[B_soil_hubgene_magenta,LOW_samples],1,mean),
                             `HIGH`=apply(cp_otu_B_soil[B_soil_hubgene_magenta,HIGH_samples],1,mean)))


table(tax_soil_B[B_soil_hubgene_magenta,]$Phylum)
soil_B_sidecol <- tax_soil_B[B_soil_hubgene_magenta,]$Phylum
names(soil_B_sidecol) <- soil_B_sidecol

soil_B_sidecol[soil_B_sidecol == "Proteobacteria"] <- "seashell4"
soil_B_sidecol[soil_B_sidecol == "Actinobacteria"] <- "red"
soil_B_sidecol[soil_B_sidecol == "Bacteroidetes"] <- "darkslateblue"
soil_B_sidecol[soil_B_sidecol == "Acidobacteria"] <- "blue"
soil_B_sidecol[soil_B_sidecol == "Chloroflexi"] <- "violetred4"
soil_B_sidecol[soil_B_sidecol == "Gemmatimonadetes"] <- "chartreuse"
soil_B_sidecol[soil_B_sidecol == "Verrucomicrobia"] <- "green"


## Plot Figure S8a
pdf(paste0("B_soil_indicotu_heatmap.pdf"),height=10, width=10)
par(las=1)
colors <- maPalette(l="lightgray",m="lightskyblue",h="orangered3", k=60)
heatmap.2(log2(soil_B_mso+1), col=colors, Rowv=F, Colv=F, margins=c(5,12), scale="none", trace="none",
          density.info="none", key.title=NA, srtCol=45,cexRow = 0.5,
          labRow=paste(rownames(soil_B_mso),tax_soil_B[B_soil_hubgene_magenta,]$Family), RowSideColors=soil_B_sidecol,
          dendrogram="none",key.xlab=expression(paste("Relative OTU abundance"," (log"[2]," CPM)")))
dev.off()




##### Random Forest #####

## Kegg_degradation
Kegg_degradation <- read.table("KEGG_degradation.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
kegg_ko_de <- Kegg_ko[rownames(Kegg_degradation),]

phy_kegg_de <- otu_table(kegg_ko_de,taxa_are_rows=T)
phy_tax_kegg_de <-tax_table(as.matrix(Kegg_degradation))
phy_design_kegg_de <- sample_data(design_B)
physeq_kegg_de <- phyloseq(phy_kegg_de,phy_tax_kegg_de,phy_design_kegg_de)

pcoa_kegg_de <- ordinate(physeq_kegg_de,"PCoA","bray")
pcoa_all_kegg_de <- plot_ordination(physeq_kegg_de, pcoa_kegg_de, type="sites", color ="Treatment1")

kegg_de_axis1 <- pcoa_all_kegg_de[["data"]][["Axis.1"]]


## Bacteria
cp_otu_B_de <- cp_otu_B[,colnames(kegg_ko_de)]

cp_otu_B_de <- cp_otu_B_de[rowSums(cp_otu_B_de) > 0,]
dim(cp_otu_B_de)

cp_otu_B_de_tax <- tax_B[rownames(cp_otu_B_de),]

phy_B_de <- otu_table(cp_otu_B_de,taxa_are_rows=T)
phy_tax_B_de <-tax_table(as.matrix(cp_otu_B_de_tax))
phy_design_B_de <- sample_data(design_B)
physeq_B_de <- phyloseq(phy_B_de,phy_tax_B_de,phy_design_B_de)

pcoa_B_de <- ordinate(physeq_B_de,"PCoA","bray")
pcoa_all_B_de <- plot_ordination(physeq_B_de, pcoa_B_de, type="sites", color ="Treatment1")

B_de_axis1 <- pcoa_all_B_de[["data"]][["Axis.1"]]



## Fungi
cp_otu_F_de <- cp_otu_F[,colnames(kegg_ko_de)]

cp_otu_F_de <- cp_otu_F_de[rowSums(cp_otu_F_de) > 0,]
dim(cp_otu_F_de)

cp_otu_F_de_tax <- tax_F[rownames(cp_otu_F_de),]

phy_F_de <- otu_table(cp_otu_F_de,taxa_are_rows=T)
phy_tax_F_de <-tax_table(as.matrix(cp_otu_F_de_tax))
phy_design_F_de <- sample_data(design_F)
physeq_F_de <- phyloseq(phy_F_de,phy_tax_F_de,phy_design_F_de)

pcoa_F_de <- ordinate(physeq_F_de,"PCoA","bray")
pcoa_all_F_de <- plot_ordination(physeq_F_de, pcoa_F_de, type="sites", color ="Treatment1")

F_de_axis1 <- pcoa_all_F_de[["data"]][["Axis.1"]]



## Protist
cp_otu_P_de <- cp_otu_P[,colnames(kegg_ko_de)]

cp_otu_P_de <- cp_otu_P_de[rowSums(cp_otu_P_de) > 0,]
dim(cp_otu_P_de)

cp_otu_P_de_tax <- tax_P[rownames(cp_otu_P_de),]

phy_P_de <- otu_table(cp_otu_P_de,taxa_are_rows=T)
phy_tax_P_de <-tax_table(as.matrix(cp_otu_P_de_tax))
phy_design_P_de <- sample_data(design_P)
physeq_P_de <- phyloseq(phy_P_de,phy_tax_P_de,phy_design_P_de)

pcoa_P_de <- ordinate(physeq_P_de,"PCoA","bray")
pcoa_all_P_de <- plot_ordination(physeq_P_de, pcoa_P_de, type="sites", color ="Treatment1")

P_de_axis1 <- pcoa_all_P_de[["data"]][["Axis.1"]]


randomforest_de <- data.frame(Bacteria = B_de_axis1,Fungi = F_de_axis1, Protist = P_de_axis1,De = kegg_de_axis1 )



library(rfPermute)  
library(randomForest)

set.seed(36)
otu_forest <- randomForest(De~., data = randomforest_de, importance = TRUE, ntree = 500)
otu_forest

importance_otu.scale <- data.frame(importance(otu_forest, scale = TRUE), check.names = FALSE)
importance_otu.scale


set.seed(36)
otu_rfP <- rfPermute(De~., data = randomforest_de, importance = TRUE, ntree = 500, nrep = 1000, num.cores = 1)
otu_rfP

importance_otu.scale <- data.frame(importance(otu_rfP, scale = TRUE), check.names = FALSE)
importance_otu.scale


importance_otu.scale.pval <- (otu_rfP$pval)[ , , 2]
importance_otu.scale.pval

importance_otu.scale <- importance_otu.scale[order(importance_otu.scale$IncNodePurity, decreasing = TRUE), ]
importance_otu.scale

importance_otu.scale$OTU_name <- rownames(importance_otu.scale)
importance_otu.scale$OTU_name <- factor(importance_otu.scale$OTU_name, levels = importance_otu.scale$OTU_name)

p <- ggplot() +
  geom_col(data = importance_otu.scale, aes(x = factor(OTU_name,levels = c("Bacteria","Fungi","Protist")), y = `%IncMSE`), width = 0.5, color = NA) +
  scale_fill_manual(values=c("dodgerblue","firebrick2","goldenrod2"))+
  labs(title = NULL, x = NULL, y = 'Increase in MSE (%)', fill = NULL) +
  theme_bw()+ theme(legend.position = 'none')+
  theme(panel.grid.major =element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())+
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(expand = c(0, 0), limit = c(0, 16))

p

for (OTU in rownames(importance_otu.scale)) {
  importance_otu.scale[OTU,'%IncMSE.pval'] <- importance_otu.scale.pval[OTU,'%IncMSE']
  if (importance_otu.scale[OTU,'%IncMSE.pval'] >= 0.05) importance_otu.scale[OTU,'%IncMSE.sig'] <- ''
  else if (importance_otu.scale[OTU,'%IncMSE.pval'] >= 0.01 & importance_otu.scale[OTU,'%IncMSE.pval'] < 0.05) importance_otu.scale[OTU,'%IncMSE.sig'] <- '*'
  else if (importance_otu.scale[OTU,'%IncMSE.pval'] >= 0.001 & importance_otu.scale[OTU,'%IncMSE.pval'] < 0.01) importance_otu.scale[OTU,'%IncMSE.sig'] <- '**'
  else if (importance_otu.scale[OTU,'%IncMSE.pval'] < 0.001) importance_otu.scale[OTU,'%IncMSE.sig'] <- '***'
}

p <- p +
  geom_text(data = importance_otu.scale, aes(x = OTU_name, y = `%IncMSE`, label = `%IncMSE.sig`), nudge_y = 1)

p

# #右上角备注模型的已知解释率
# p <- p +
#   annotate('text', label = 'Plant Age', x = 9, y = 15, size = 4) +
#   annotate('text', label = sprintf('italic(R^2) == %.2f', 96.14), x = 9, y = 13, size = 3, parse = TRUE)
# 
# p
# importance_otu.scale.pval
# 
# plot(rp.importance(otu_rfP, scale = TRUE))
# 
# 
# library(A3)
# set.seed(619)
# otu_forest.pval <- a3(De~., data = randomforest_de, model.fn = randomForest, p.acc = 0.001, model.args = list(importance = TRUE, ntree = 500))
# otu_forest.pval


## Bacteria random forest
cp_otu_B_de <- as.data.frame(t(cp_otu_B_de))
cp_otu_B_de$De <- kegg_de_axis1

# set.seed(619)
# otu_forest_fun <- randomForest(De~., data = cp_otu_B_de, importance = TRUE, ntree = 500)
# otu_forest_fun
# 
# importance_otu.scale_fun <- data.frame(importance(otu_forest_fun, scale = TRUE), check.names = FALSE)
# importance_otu.scale_fun <- head(importance_otu.scale_fun)
# importance_otu.scale_fun
set.seed(22)

otu_rfP <- rfPermute(De~., data = cp_otu_B_de, importance = TRUE, ntree = 500, nrep = 1000, num.cores = 8)
otu_rfP

importance_otu.scale <- data.frame(importance(otu_rfP, scale = TRUE), check.names = FALSE)
importance_otu.scale <- importance_otu.scale[1:55,]
names(importance_otu.scale) <- c("IncMSE","IncMSE.pval","IncNodePurity","IncNodePurity.pval")

importance_otu <- cp_otu_B_de_tax[rownames(importance_otu.scale),]

ggplot(importance_otu.scale,aes(x=IncMSE,y=reorder(rownames(importance_otu.scale),IncMSE)))+
  geom_bar(aes(fill = importance_otu$cols),
           position = position_dodge(),
           width = 0.5,
           stat = "identity")+ 
  theme_minimal() +
  xlab("IncMSE")+
  scale_y_discrete(expand=c(0,0))+
  scale_x_continuous(expand=c(0,0))+
  theme(axis.text.y = element_text(size = 16,colour = "black"),
        axis.text.x = element_text(size=14,color="black"),
        axis.title.x.bottom = element_text(size=16,color="black"),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank())


set.seed(22)

otu_rfP <- rfPermute(De~., data = cp_otu_B_de, importance = TRUE, ntree = 500, nrep = 1000, num.cores = 8)
otu_rfP


imp_otu <- as_tibble(round(importance(otu_rfP), 2),rownames = "OTUid") %>%
  arrange(desc(`%IncMSE`))
imp_otu


ncol(cp_otu_B_de)
myotu= cp_otu_B_de[,-7010]
set.seed(22)

result<-rfcv(myotu, cp_otu_B_de$De, cv.fold=5, scale = "log", step = 0.9)
result1<-result
result1$n.var # 723

with(result, plot(n.var, error.cv, log="x", type="o", lwd=2))







head(importance_otu.scale)
otu_id.select <- rownames(importance_otu.scale[1:20,])

venndiagram(otu_id.select,otu_de_tax_y,type=2,
            printsub=F,lcol="black",tcol="black",diacol="black",lines="black")


otu_B_de_tax <- read.table("B_de.txt", row.names=1,sep="\t", header=T, blank.lines.skip=F, check.names=F)
rownames(otu_B_de_tax) <- paste("b", rownames(otu_B_de_tax), sep="")

cp_otu_B_degra <- cp_otu_B[rownames(otu_B_de_tax),colnames(cp_otu_B_de)]

otu_de_tax_y <- rownames(otu_B_de_tax)[which(otu_B_de_tax$DE == "Y")]

for(i in c(901:1000)) {
  set.seed(i)
  
  otu_rfP <- rfPermute(De~., data = cp_otu_B_de, importance = TRUE, ntree = 500, nrep = 1000, num.cores = 8)
  importance_otu.scale <- data.frame(importance(otu_rfP, scale = TRUE), check.names = FALSE)
  otu_id.select <- rownames(importance_otu.scale[1:20,])
  a <- venndiagram(otu_id.select,otu_de_tax_y,type=2,
                   printsub=F,lcol="black",tcol="black",diacol="black",lines="black")
  print(a$q1)
}

## Protist random forest
cp_otu_P_de <- as.data.frame(t(cp_otu_P_de))
cp_otu_P_de$De <- kegg_de_axis1

set.seed(619)
otu_forest_pro <- randomForest(De~., data = cp_otu_P_de, importance = TRUE, ntree = 500)
otu_forest_pro

importance_otu.scale_pro <- data.frame(importance(otu_forest_pro, scale = TRUE), check.names = FALSE)
importance_otu.scale_pro <- head(importance_otu.scale_pro)
importance_otu.scale_pro

set.seed(520)
otu_rfP <- rfPermute(De~., data = cp_otu_P_de, importance = TRUE, ntree = 500, nrep = 1000, num.cores = 1)
otu_rfP

importance_otu.scale <- data.frame(importance(otu_rfP, scale = TRUE), check.names = FALSE)
head(importance_otu.scale)
otu_id.select <- rownames(importance_otu.scale[1:20,])


fun_pro <- data.frame(cp_otu_F_de$fASV_9,cp_otu_P_de$`592`)
colnames(fun_pro) <- c("fun", "pro")
fun_pro_RA <- t(t(fun_pro)/colSums(fun_pro)) * 100
fun_pro_RA <- as.data.frame(fun_pro_RA)

ggplot(data=fun_pro_RA, aes(x=fun, y=pro)) + geom_point(shape=17,size=4)+
  geom_smooth(method = 'lm', formula = y ~ x)+
  stat_poly_eq(aes(label = paste(..eq.label.., ..adj.rr.label.., sep = '~~~~')), formula = y ~ x, parse = T)+
  theme(panel.grid = element_blank())+
  theme(panel.border = element_rect(fill=NA,color="black", size=1.2, linetype="solid"))+
  theme(panel.background = element_blank(),
        panel.grid = element_blank())+
  theme(axis.title.x=element_text(size=20),
        axis.title.y=element_text(size=20))+
  theme(axis.text.x=element_text(size=15,angle = 0,hjust =1 , vjust = 1),
        axis.text.y=element_text(size=15,angle = 0,hjust =1 , vjust = 0.4),
        axis.title.y=element_text(size=18))



## Soil bacteria: Calculate percentage of sequences classified into each phylum
otu_B_soil_mso <- cp_otu_B_soil[B_soil_hubgene_magenta,]
otu_B_soil_mso_ra <- t(t(otu_B_soil_mso)/colSums(otu_B_soil_mso)) * 100

PHYLAnames_soil_mso_B <- names(sort(table(tax_soil_B[B_soil_hubgene_magenta,]$Phylum),decr=T))
length(PHYLAnames_soil_mso_B)

table(tax_soil_B[B_soil_hubgene_magenta,]$Phylum)
soil_B_sidecol <- tax_soil_B[B_soil_hubgene_magenta,]$Phylum
names(soil_B_sidecol) <- soil_B_sidecol

soil_B_sidecol[soil_B_sidecol == "Proteobacteria"] <- "seashell4"
soil_B_sidecol[soil_B_sidecol == "Actinobacteria"] <- "red"
soil_B_sidecol[soil_B_sidecol == "Bacteroidetes"] <- "darkslateblue"
soil_B_sidecol[soil_B_sidecol == "Acidobacteria"] <- "blue"
soil_B_sidecol[soil_B_sidecol == "Chloroflexi"] <- "violetred4"
soil_B_sidecol[soil_B_sidecol == "Gemmatimonadetes"] <- "chartreuse"
soil_B_sidecol[soil_B_sidecol == "Verrucomicrobia"] <- "green"


## Plot Figure S8a
pdf(paste0("B_soil_indicotu_heatmap.pdf"),height=10, width=10)
par(las=1)
colors <- maPalette(l="lightgray",m="lightskyblue",h="orangered3", k=60)
heatmap.2(log2(soil_B_mso+1), col=colors, Rowv=F, Colv=F, margins=c(5,12), scale="none", trace="none",
          density.info="none", key.title=NA, srtCol=45,cexRow = 0.5,
          labRow=paste(rownames(soil_B_mso),tax_soil_B[B_soil_hubgene_magenta,]$Family), RowSideColors=soil_B_sidecol,
          dendrogram="none",key.xlab=expression(paste("Relative OTU abundance"," (log"[2]," CPM)")))
dev.off()





### Soil&Film
B_tt_enrich_soil_film <- as.data.frame(B_tt_enrich_soil_film)
B_forMA_soil_film <- data.frame(2^B_tt_enrich_soil_film$logCPM,
                                B_tt_enrich_soil_film$logFC,
                                B_tt_enrich_soil_film$FDR<0.05)
colnames(B_forMA_soil_film) <- c("CPM", "logFC", "signif")

## define colors
B_forMA_soil_film$col[B_forMA_soil_film$signif==F] <- "dimgrey"
B_forMA_soil_film$col[B_forMA_soil_film$logFC>0 & B_forMA_soil_film$signif==T] <- "sienna4"
B_forMA_soil_film$col[B_forMA_soil_film$logFC<0 & B_forMA_soil_film$signif==T] <- "#DAA520"
# order for plotting colors
B_forMA_soil_film$ord[B_forMA_soil_film$col=="dimgrey"] <- 1
B_forMA_soil_film$ord[B_forMA_soil_film$col=="#DAA520"] <- 2
B_forMA_soil_film$ord[B_forMA_soil_film$col=="sienna4"] <- 3
B_forMA_soil_film <- B_forMA_soil_film[sort(B_forMA_soil_film$ord,ind=T,decr=F)$ix,]

## define pch
B_forMA_soil_film$pch[B_forMA_soil_film$signif==F] <- 1
B_forMA_soil_film$pch[B_forMA_soil_film$signif==T] <- 16



### Soil&Film
B_tt_enrich_root_film <- as.data.frame(B_tt_enrich_root_film)
B_forMA_root_film <- data.frame(2^B_tt_enrich_root_film$logCPM,
                                B_tt_enrich_root_film$logFC,
                                B_tt_enrich_root_film$FDR<0.05)
colnames(B_forMA_root_film) <- c("CPM", "logFC", "signif")

## define colors
B_forMA_root_film$col[B_forMA_root_film$signif==F] <- "dimgrey"
B_forMA_root_film$col[B_forMA_root_film$logFC>0 & B_forMA_root_film$signif==T] <- "forestgreen"
B_forMA_root_film$col[B_forMA_root_film$logFC<0 & B_forMA_root_film$signif==T] <- "#DAA520"
# order for plotting colors
B_forMA_root_film$ord[B_forMA_root_film$col=="dimgrey"] <- 1
B_forMA_root_film$ord[B_forMA_root_film$col=="forestgreen"] <- 2
B_forMA_root_film$ord[B_forMA_root_film$col=="sienna4"] <- 3
B_forMA_root_film <- B_forMA_root_film[sort(B_forMA_root_film$ord,ind=T,decr=F)$ix,]

## define pch
B_forMA_root_film$pch[B_forMA_root_film$signif==F] <- 1
B_forMA_root_film$pch[B_forMA_root_film$signif==T] <- 16

## plot
pdf(paste0("variation_analysis.pdf"), encoding="MacRoman", width=8, height=4)
par(mfrow=c(1,2), mar=c(4,4,4,1))

plot(B_forMA_soil_film$CPM, B_forMA_soil_film$logFC, log="x", 
     main="Soil&Film",
     ylab="log fold change", xlab="average abundance CPM",
     col=B_forMA_soil_film$col, cex=1, pch=B_forMA_soil_film$pch, las=1)
text(rep(200,200), c(-7,7), label=c("film", "soil"), adj=0, cex=1.5, col=c("#DAA520","sienna4"))

plot(B_forMA_root_film$CPM, B_forMA_root_film$logFC, log="x", 
     main="Root&Film",
     ylab="log fold change", xlab="average abundance CPM",
     col=B_forMA_root_film$col, cex=1, pch=B_forMA_root_film$pch, las=1)
text(rep(150,150), c(-7,7), label=c( "film","root"), adj=0, cex=1.5, col=c("#DAA520","forestgreen"))
dev.off()





## Fungi
##### Define sample types #####
F_soil_film <- cp_otu_F[, c(soil_nofilm,filmsamples)]

F_soil_film <- F_soil_film[rowSums(F_soil_film) > 0,]
dim(F_soil_film)


F_tax_soil_film <- tax_F[rownames(F_soil_film),]
design_soil_film <- design_B[c(soil_nofilm,filmsamples),]

design_soil_film$film <- factor(design_soil_film$film,c("NO","ADD"))


##### Define sample types #####
F_root_film <- cp_otu_F[, c(root_nofilm,filmsamples)]

F_root_film <- F_root_film[rowSums(F_root_film) > 0,]
dim(F_root_film)


F_tax_root_film <- tax_F[rownames(F_root_film),]
design_root_film <- design_B[c(root_nofilm,filmsamples),]

design_root_film$film <- factor(design_root_film$film,c("NO","ADD"))


## Define Soil and Root and Film enriched BACTERIA
F_edgeR_soil_film_enrich <- DGEList(counts=F_soil_film, 
                                    group=design_soil_film$film)

F_edgeR_soil_film_enrich <- calcNormFactors(F_edgeR_soil_film_enrich)

F_otu_norm_soil_film_enrich <- cpm(F_edgeR_soil_film_enrich, normalized.lib.sizes=T, log=F)

F_model_mat_enrich_soil_film <- model.matrix(~Block+film, data=design_soil_film)

F_dge_enrich_soil_film <- estimateGLMRobustDisp(F_edgeR_soil_film_enrich, design=F_model_mat_enrich_soil_film)

# plotBCV(dge_enrich_soil_film)
# plotSmear(dge_enrich_soil_film, pair=c("soil","film"))

F_fit_enrich_soil_film <- glmFit(F_dge_enrich_soil_film, design=F_model_mat_enrich_soil_film)
F_lrt_enrich_soil_film <- glmLRT(F_fit_enrich_soil_film, coef="filmADD")
F_tt_enrich_soil_film <- topTags(F_lrt_enrich_soil_film, n=Inf, p.value=1)
head(F_tt_enrich_soil_film$table)

F_film_enrich_soil <- F_tt_enrich_soil_film$table[F_tt_enrich_soil_film$table$logFC < 0 & F_tt_enrich_soil_film$table$FDR < 0.05,]
F_soil_enrich_soil <- F_tt_enrich_soil_film$table[F_tt_enrich_soil_film$table$logFC > 0 & F_tt_enrich_soil_film$table$FDR < 0.05,]



## Define Soil and Root and Film enriched BACTERIA
F_edgeR_root_film_enrich <- DGEList(counts=F_root_film, 
                                    group=design_root_film$film)

F_edgeR_root_film_enrich <- calcNormFactors(F_edgeR_root_film_enrich)

F_otu_norm_root_film_enrich <- cpm(F_edgeR_root_film_enrich, normalized.lib.sizes=T, log=F)

F_model_mat_enrich_root_film <- model.matrix(~Block+film, data=design_root_film)

F_dge_enrich_root_film <- estimateGLMRobustDisp(F_edgeR_root_film_enrich, design=F_model_mat_enrich_soil_film)

# plotBCV(dge_enrich_root_film)
# plotSmear(dge_enrich_root_film, pair=c("soil","film"))

F_fit_enrich_root_film <- glmFit(F_dge_enrich_root_film, design=F_model_mat_enrich_soil_film)
F_lrt_enrich_root_film <- glmLRT(F_fit_enrich_root_film, coef="filmADD")
F_tt_enrich_root_film <- topTags(F_lrt_enrich_root_film, n=Inf, p.value=1)
head(F_tt_enrich_root_film$table)

F_film_enrich_root <- F_tt_enrich_root_film$table[F_tt_enrich_root_film$table$logFC < 0 & F_tt_enrich_root_film$table$FDR < 0.05,]
F_root_enrich_root <- F_tt_enrich_root_film$table[F_tt_enrich_root_film$table$logFC > 0 & F_tt_enrich_root_film$table$FDR < 0.05,]





#### Figure 1, MA plots
# range(tt_enrich_soil_film$logFC)
# range(tt_enrich_its$logFC)


# pdf(paste0("Figure1.pdf"), encoding="MacRoman", width=8, height=4)
# par(mfrow=c(1,2), mar=c(4,4,4,1))

### Soil&Film
F_tt_enrich_soil_film <- as.data.frame(F_tt_enrich_soil_film)
F_forMA_soil_film <- data.frame(2^F_tt_enrich_soil_film$logCPM,
                                F_tt_enrich_soil_film$logFC,
                                F_tt_enrich_soil_film$FDR<0.05)
colnames(F_forMA_soil_film) <- c("CPM", "logFC", "signif")

## define colors
F_forMA_soil_film$col[F_forMA_soil_film$signif==F] <- "dimgrey"
F_forMA_soil_film$col[F_forMA_soil_film$logFC>0 & F_forMA_soil_film$signif==T] <- "sienna4"
F_forMA_soil_film$col[F_forMA_soil_film$logFC<0 & F_forMA_soil_film$signif==T] <- "#DAA520"
# order for plotting colors
F_forMA_soil_film$ord[F_forMA_soil_film$col=="dimgrey"] <- 1
F_forMA_soil_film$ord[F_forMA_soil_film$col=="#DAA520"] <- 2
F_forMA_soil_film$ord[F_forMA_soil_film$col=="sienna4"] <- 3
F_forMA_soil_film <- F_forMA_soil_film[sort(F_forMA_soil_film$ord,ind=T,decr=F)$ix,]

## define pch
F_forMA_soil_film$pch[F_forMA_soil_film$signif==F] <- 1
F_forMA_soil_film$pch[F_forMA_soil_film$signif==T] <- 16



### Soil&Film
F_tt_enrich_root_film <- as.data.frame(F_tt_enrich_root_film)
F_forMA_root_film <- data.frame(2^F_tt_enrich_root_film$logCPM,
                                F_tt_enrich_root_film$logFC,
                                F_tt_enrich_root_film$FDR<0.05)
colnames(F_forMA_root_film) <- c("CPM", "logFC", "signif")

## define colors
F_forMA_root_film$col[F_forMA_root_film$signif==F] <- "dimgrey"
F_forMA_root_film$col[F_forMA_root_film$logFC>0 & F_forMA_root_film$signif==T] <- "forestgreen"
F_forMA_root_film$col[F_forMA_root_film$logFC<0 & F_forMA_root_film$signif==T] <- "#DAA520"
# order for plotting colors
F_forMA_root_film$ord[F_forMA_root_film$col=="dimgrey"] <- 1
F_forMA_root_film$ord[F_forMA_root_film$col=="forestgreen"] <- 2
F_forMA_root_film$ord[F_forMA_root_film$col=="sienna4"] <- 3
F_forMA_root_film <- F_forMA_root_film[sort(F_forMA_root_film$ord,ind=T,decr=F)$ix,]

## define pch
F_forMA_root_film$pch[F_forMA_root_film$signif==F] <- 1
F_forMA_root_film$pch[F_forMA_root_film$signif==T] <- 16

## plot
pdf(paste0("variation_analysis.pdf"), encoding="MacRoman", width=8, height=4)
par(mfrow=c(1,2), mar=c(4,4,4,1))

plot(F_forMA_soil_film$CPM, F_forMA_soil_film$logFC, log="x",
     main="Soil&Film",
     ylab="log fold change", xlab="average abundance CPM",
     col=F_forMA_soil_film$col, cex=1, pch=F_forMA_soil_film$pch, las=1)
text(rep(200,200), c(-7,7), label=c( "film","soil"), adj=0, cex=1.5, col=c("#DAA520","sienna4"))

plot(F_forMA_root_film$CPM, F_forMA_root_film$logFC, log="x",
     main="Root&Film",
     ylab="log fold change", xlab="average abundance CPM",
     col=F_forMA_root_film$col, cex=1, pch=F_forMA_root_film$pch, las=1)
text(rep(150,150), c(-7,7), label=c("film", "root"), adj=0, cex=1.5, col=c("#DAA520","forestgreen"))
dev.off()



## Protist
##### Define sample types #####
P_soil_film <- cp_otu_P[, c(soil_nofilm,filmsamples)]

P_soil_film <- P_soil_film[rowSums(P_soil_film) > 0,]
dim(P_soil_film)


P_tax_soil_film <- tax_P[rownames(P_soil_film),]
design_soil_film <- design_P[c(soil_nofilm,filmsamples),]

design_soil_film$film <- factor(design_soil_film$film,c("NO","ADD"))


##### Define sample types #####
P_root_film <- cp_otu_P[, c(root_nofilm,filmsamples)]

P_root_film <- P_root_film[rowSums(P_root_film) > 0,]
dim(P_root_film)


P_tax_root_film <- tax_B[rownames(P_root_film),]
design_root_film <- design_B[c(root_nofilm,filmsamples),]

design_root_film$film <- factor(design_root_film$film,c("NO","ADD"))


## Define Soil and Root and Film enriched BACTERIA
P_edgeR_soil_film_enrich <- DGEList(counts=P_soil_film, 
                                    group=design_soil_film$film)

P_edgeR_soil_film_enrich <- calcNormFactors(P_edgeR_soil_film_enrich)

P_otu_norm_soil_film_enrich <- cpm(P_edgeR_soil_film_enrich, normalized.lib.sizes=T, log=F)

P_model_mat_enrich_soil_film <- model.matrix(~Block+film, data=design_soil_film)

P_dge_enrich_soil_film <- estimateGLMRobustDisp(P_edgeR_soil_film_enrich, design=P_model_mat_enrich_soil_film)

# plotBCV(dge_enrich_soil_film)
# plotSmear(dge_enrich_soil_film, pair=c("soil","film"))

P_fit_enrich_soil_film <- glmFit(P_dge_enrich_soil_film, design=P_model_mat_enrich_soil_film)
P_lrt_enrich_soil_film <- glmLRT(P_fit_enrich_soil_film, coef="filmADD")
P_tt_enrich_soil_film <- topTags(P_lrt_enrich_soil_film, n=Inf, p.value=1)
head(P_tt_enrich_soil_film$table)

P_film_enrich_soil <- P_tt_enrich_soil_film$table[P_tt_enrich_soil_film$table$logFC < 0 & P_tt_enrich_soil_film$table$FDR < 0.05,]
P_soil_enrich_soil <- P_tt_enrich_soil_film$table[P_tt_enrich_soil_film$table$logFC > 0 & P_tt_enrich_soil_film$table$FDR < 0.05,]



## Define Soil and Root and Film enriched BACTERIA
P_edgeR_root_film_enrich <- DGEList(counts=P_root_film, 
                                    group=design_root_film$film)

P_edgeR_root_film_enrich <- calcNormFactors(P_edgeR_root_film_enrich)

P_otu_norm_root_film_enrich <- cpm(P_edgeR_root_film_enrich, normalized.lib.sizes=T, log=F)

P_model_mat_enrich_root_film <- model.matrix(~Block+film, data=design_root_film)

P_dge_enrich_root_film <- estimateGLMRobustDisp(P_edgeR_root_film_enrich, design=P_model_mat_enrich_soil_film)

# plotBCV(dge_enrich_root_film)
# plotSmear(dge_enrich_root_film, pair=c("soil","film"))

P_fit_enrich_root_film <- glmFit(P_dge_enrich_root_film, design=P_model_mat_enrich_soil_film)
P_lrt_enrich_root_film <- glmLRT(P_fit_enrich_root_film, coef="filmADD")
P_tt_enrich_root_film <- topTags(P_lrt_enrich_root_film, n=Inf, p.value=1)
head(P_tt_enrich_root_film$table)

P_film_enrich_root <- P_tt_enrich_root_film$table[P_tt_enrich_root_film$table$logFC < 0 & P_tt_enrich_root_film$table$FDR < 0.05,]
P_root_enrich_root <- P_tt_enrich_root_film$table[P_tt_enrich_root_film$table$logFC > 0 & P_tt_enrich_root_film$table$FDR < 0.05,]





#### Figure 1, MA plots
# range(tt_enrich_soil_film$logFC)
# range(tt_enrich_its$logFC)


# pdf(paste0("Figure1.pdf"), encoding="MacRoman", width=8, height=4)
# par(mfrow=c(1,2), mar=c(4,4,4,1))

### Soil&Film
P_tt_enrich_soil_film <- as.data.frame(P_tt_enrich_soil_film)
P_forMA_soil_film <- data.frame(2^P_tt_enrich_soil_film$logCPM,
                                P_tt_enrich_soil_film$logFC,
                                P_tt_enrich_soil_film$FDR<0.05)
colnames(P_forMA_soil_film) <- c("CPM", "logFC", "signif")

## define colors
P_forMA_soil_film$col[P_forMA_soil_film$signif==F] <- "dimgrey"
P_forMA_soil_film$col[P_forMA_soil_film$logFC>0 & P_forMA_soil_film$signif==T] <- "sienna4"
P_forMA_soil_film$col[P_forMA_soil_film$logFC<0 & P_forMA_soil_film$signif==T] <- "#DAA520"
# order for plotting colors
P_forMA_soil_film$ord[P_forMA_soil_film$col=="dimgrey"] <- 1
P_forMA_soil_film$ord[P_forMA_soil_film$col=="#DAA520"] <- 2
P_forMA_soil_film$ord[P_forMA_soil_film$col=="sienna4"] <- 3
P_forMA_soil_film <- P_forMA_soil_film[sort(P_forMA_soil_film$ord,ind=T,decr=F)$ix,]

## define pch
P_forMA_soil_film$pch[P_forMA_soil_film$signif==F] <- 1
P_forMA_soil_film$pch[P_forMA_soil_film$signif==T] <- 16



### Soil&Film
P_tt_enrich_root_film <- as.data.frame(P_tt_enrich_root_film)
P_forMA_root_film <- data.frame(2^P_tt_enrich_root_film$logCPM,
                                P_tt_enrich_root_film$logFC,
                                P_tt_enrich_root_film$FDR<0.05)
colnames(P_forMA_root_film) <- c("CPM", "logFC", "signif")

## define colors
P_forMA_root_film$col[P_forMA_root_film$signif==F] <- "dimgrey"
P_forMA_root_film$col[P_forMA_root_film$logFC>0 & P_forMA_root_film$signif==T] <- "forestgreen"
P_forMA_root_film$col[P_forMA_root_film$logFC<0 & P_forMA_root_film$signif==T] <- "#DAA520"
# order for plotting colors
P_forMA_root_film$ord[P_forMA_root_film$col=="dimgrey"] <- 1
P_forMA_root_film$ord[P_forMA_root_film$col=="forestgreen"] <- 2
P_forMA_root_film$ord[P_forMA_root_film$col=="sienna4"] <- 3
P_forMA_root_film <- P_forMA_root_film[sort(P_forMA_root_film$ord,ind=T,decr=F)$ix,]

## define pch
P_forMA_root_film$pch[P_forMA_root_film$signif==F] <- 1
P_forMA_root_film$pch[P_forMA_root_film$signif==T] <- 16

## plot
pdf(paste0("variation_analysis.pdf"), encoding="MacRoman", width=8, height=4)
par(mfrow=c(1,2), mar=c(4,4,4,1))

plot(P_forMA_soil_film$CPM, P_forMA_soil_film$logFC, log="x",
     main="Soil&Film",
     ylab="log fold change", xlab="average abundance CPM",
     col=P_forMA_soil_film$col, cex=1, pch=P_forMA_soil_film$pch, las=1)
text(rep(200,200), c(-7,7), label=c( "film","soil"), adj=0, cex=1.5, col=c("#DAA520","sienna4"))

plot(P_forMA_root_film$CPM, P_forMA_root_film$logFC, log="x", 
     main="Root&Film",
     ylab="log fold change", xlab="average abundance CPM",
     col=P_forMA_root_film$col, cex=1, pch=P_forMA_root_film$pch, las=1)
text(rep(150,150), c(-7,7), label=c( "film","root"), adj=0, cex=1.5, col=c("#DAA520","forestgreen"))
dev.off()



